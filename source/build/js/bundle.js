/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./js/main-page-controller.js":
/*!************************************!*\
  !*** ./js/main-page-controller.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MainPageController\": () => (/* binding */ MainPageController)\n/* harmony export */ });\n/* harmony import */ var _widgets_drag_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets/drag-view.js */ \"./js/widgets/drag-view.js\");\n\nclass MainPageController {\n  constructor(view) {\n    this.view = view\n\n    this.initializePage()\n  }\n\n  initializeAttributes() {\n    this.leftPaneWidth = this.leftPaneFrame.getBoundingClientRect().width\n    this.leftPaneButtonWidth = this.leftPaneButton.getBoundingClientRect().width\n    this.leftMargin = this.leftPaneFrame.getBoundingClientRect().left\n    this.imageInsertPosition = { left: '20px', top: '50px' }\n  }\n\n  initializePage() {\n    this.main = document.querySelector('main')\n    this.page = document.querySelector('main .page')\n    this.left = document.querySelector('left-pane')\n    this.dragview = document.querySelector('drag-view')\n    this.leftPaneButton = this.view.querySelector('#index-button')\n    this.leftPaneFrame = this.left.shadowRoot.querySelector('#outer-rectangle')\n\n    // Toolbar\n    this.toolbar = document.querySelector('tool-bar')\n  }\n  registerListeners() {\n    // Left Pane\n    this.leftPaneButton.addEventListener('click', () => {\n      this.toggleLeftPane()\n    })\n    document\n      .querySelector('#icon-ionic-ios-book')\n      .addEventListener('click', () => {\n        this.toggleLeftPane()\n      })\n\n    //Tool Bar\n    this.toolbar.addEventListener('textclicked', (e) => {\n      this.dragview.textOnClick = this.dragview.textOnClick ? false : true\n    })\n\n    this.toolbar.addEventListener('imageclicked', (img, e) => {\n      this.dragview.addDraggableImage(this.imageInsertPosition, img)\n    })\n\n    this.toolbar.addEventListener('bulletclicked', (e) => {\n      this.dragview.toggleBulletFromFocusedText()\n    })\n\n    this.toolbar.addEventListener('boldclicked', (e) => {\n      this.dragview.toggleBold()\n    })\n\n    this.toolbar.addEventListener('italicclicked', (e) => {\n      this.dragview.toggleItalic()\n    })\n\n    this.toolbar.addEventListener('underlineclicked', (e) => {\n      this.dragview.toggleUnderline()\n    })\n\n    this.toolbar.addEventListener('sizeclicked', (fontSize, e) => {\n      this.dragview.fontSize = fontSize\n    })\n\n    this.toolbar.addEventListener('colorclicked', (color, e) => {\n      this.dragview.textColor = color\n    })\n  }\n\n  toggleLeftPane() {\n    if (this.left.style.display === 'none') {\n      this.left.style.display = 'block'\n      this.page.style.left = this.leftPaneWidth + this.leftMargin + 'px'\n      //console.log('open')\n    } else {\n      // Page hides - Move MAIN page left\n      this.left.style.display = 'none'\n      this.page.style.left = this.leftPaneButtonWidth + this.leftMargin + 'px'\n      //console.log('close')\n    }\n  }\n\n  // //Example code\n  // onTextOnClickChanged(isTextOnClick) {\n  //   console.log('TextOnClick change to: ' + isTextOnClick)\n  // }\n\n  // /**\n  //  * @param {String} textColor rgb text color or name (e.g. \"back\", \"red\", \"#fffeee\")\n  //  */\n  // OnTextColorChanged(textColor) {\n  //   console.log('Text color change to: ' + textColor)\n  // }\n\n  // /**\n  //  * @param {object} position { left: '20px', top: '50px' }\n  //  * @param {Image} img\n  //  */\n  // insertImage(position, img) {\n  //   console.log('Insert image at position: ' + position)\n  // }\n}\n\n\n//# sourceURL=webpack://source/./js/main-page-controller.js?");

/***/ }),

/***/ "./js/script.js":
/*!**********************!*\
  !*** ./js/script.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _widgets_drag_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets/drag-view.js */ \"./js/widgets/drag-view.js\");\n/* harmony import */ var _main_page_controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main-page-controller.js */ \"./js/main-page-controller.js\");\n/* harmony import */ var _widgets_toolbar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widgets/toolbar.js */ \"./js/widgets/toolbar.js\");\n/* harmony import */ var _widgets_right_pane_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./widgets/right-pane.js */ \"./js/widgets/right-pane.js\");\n\n\n\n\n\n// let page = document.createElement('drag-view')\n// let toolbar = document.createElement('tool-bar')\n\n// document.getElementsByTagName('main')[0].appendChild(page)\n// document.getElementsByTagName('main')[0].appendChild(toolbar)\n\n/**\n * Main page control\n */\nconst mainPageBody = document.querySelector('body')\n//console.log('callling const')\nconst mainPageController = new _main_page_controller_js__WEBPACK_IMPORTED_MODULE_1__.MainPageController(mainPageBody)\n//console.log('const called')\n\nwindow.addEventListener('load', () => {\n  //console.log('initializing atts')\n  mainPageController.initializeAttributes()\n  //console.log('atts initialized')\n  mainPageController.registerListeners()\n})\n\n\n//# sourceURL=webpack://source/./js/script.js?");

/***/ }),

/***/ "./js/widgets/drag-view.js":
/*!*********************************!*\
  !*** ./js/widgets/drag-view.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DragView\": () => (/* binding */ DragView)\n/* harmony export */ });\n/* harmony import */ var _text_box_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-box.js */ \"./js/widgets/text-box.js\");\n/* harmony import */ var _image_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image-view.js */ \"./js/widgets/image-view.js\");\n\n\n\nclass DragView extends HTMLElement {\n  constructor() {\n    super()\n    const template = document.createElement('template')\n    template.innerHTML = `\n        <style>\n          .drag-frame {\n            position:relative;\n            background: transparent;\n            width:100%;\n            height: 100%;\n          }\n          .draggable {\n            display:block;\n            position:absolute;\n          }\n\n          .dragging {\n          }\n          .focus {\n\n          }\n\n          .textbox {\n            resize: none;\n            padding: 5px;\n            overflow: hidden;\n            height: 20px;\n            font-size: 20px;\n            width: 200px;\n            border: none;\n          }\n\n          .bullet-square {\n            display:block;\n            position:absolute;\n            background-color: black;\n            display:block;\n            border: 1.5px solid black;\n            height: 4px;\n            width: 4px;\n          }\n\n          .bullet-circle {\n            display:block;\n            position:absolute;\n            border-radius: 50%;\n            background: transparent;\n            border: 1.5px solid black;\n            display:block;\n            height: 4px;\n            width: 4px;\n          }\n          .bullet-dot {\n            display: block;\n            position:absolute;\n            border-radius: 50%;\n            border: 1.5px solid black;\n            background-color: black;\n            display:block;\n            height: 4px;\n            width: 4px;\n          }\n\n          .image {\n            display: block;\n            width: 100%\n            height:100%\n          }\n\n          .image-frame {\n            display: block;\n            position: absolute;\n            resize: both;\n          }\n\n        </style>\n        <div class=\"drag-frame\">\n        </div>\n        `\n\n    // template.addEventListener('click',editPage());\n\n    //const link = document.createElement('link')\n    //link.setAttribute('rel', 'stylesheet')\n    //link.setAttribute('href', 'style.css')\n\n    this.attachShadow({ mode: 'open' })\n    this.shadowRoot.appendChild(template.content.cloneNode(true))\n    //this.shadowRoot.appendChild(link)\n    this.initializeFields()\n    this.initializeEventListeners()\n  }\n\n  initializeEventListeners() {\n    window.addEventListener('keydown', (e) => {\n      switch (e.key) {\n        case 'Delete':\n          //console.log('del')\n          if (this.focusedChild) {\n            this.focusedChild.removeSelf()\n          }\n          break\n      }\n    })\n    this.draggableFrame.addEventListener('click', (e) => {\n      //console.log('click?')\n      if (this.mouseEvents.has('imagedragged')) return\n      //console.log('click')\n      if (this.mouseEvents.has('resized')) {\n        this.mouseEvents.delete('resized')\n        return\n      }\n      if (this.createTextOnClick) {\n        const framePosition = this.draggableFrame.getBoundingClientRect()\n        //console.log('frame: ' + framePosition.x + '  mouse: ' + e.clientX)\n        const textPosition = {\n          //TODO 10, 20 should be variables\n          left: e.clientX - framePosition.x - 10 + 'px',\n          top: e.clientY - framePosition.y - 20 + 'px'\n        }\n        this.addDraggableTextBox(textPosition).focus()\n      }\n    })\n    window.addEventListener('click', (e) => {\n      if (this.mouseEvents.has('imagedragged')) {\n        //console.log('remove dragged...')\n        this.mouseEvents.delete('imagedragged')\n      }\n    })\n    this.draggableFrame.addEventListener('mouseleave', (e) => {\n      this.textBoxes.forEach((textBox, index) => {\n        textBox.onDraggableFrameMouseOut()\n      })\n    })\n\n    this.draggableFrame.addEventListener('mouseenter', (e) => {\n      this.textBoxes.forEach((textBox, index) => {\n        textBox.onDraggableFrameMouseEnter()\n      })\n    })\n  }\n\n  initializeFields() {\n    this.draggableFrame = this.shadowRoot.querySelector('.drag-frame')\n    this.lastFocusedText = undefined\n    this.textBoxes = []\n    this.draggableChildren = []\n    this.bltType = 'dot'\n    this.textOnClick = true\n    this.enableMagneticPositioning = true\n    this.bulletMargin = 10\n    this.baselineFontSize = 14\n    this.defaultPadding = 15\n    this.defaultTabSize = 2\n    this.lineSpacing = 0\n    this.magneticPotentialThreshold = 30\n    this.bulletStyles = ['dot', 'circle', 'square']\n    this.mouseEvents = new Set()\n    this.movingElement = new Set()\n    this.focusedChild = undefined\n    this.fontSz = 20\n    this.txtColor = 'black'\n    this.bold = false\n    this.italic = false\n    this.underline = false\n  }\n\n  toggleBulletFromFocusedText() {\n    if (this.lastFocusedText.bullet) {\n      this.removeBulletFromeFocusedText()\n    } else {\n      this.addBulletToFocusedText()\n    }\n  }\n\n  removeBulletFromeFocusedText() {\n    this.lastFocusedText.removeBullet()\n  }\n\n  addBulletToFocusedText() {\n    this.addBulletToText(this.lastFocusedText, this.bltType)\n  }\n\n  /**\n   * Add a bullet to a text box\n   * @param {*} bulletType 'circle', 'square', 'dot'\n   * @param {*} textBox\n   * @returns {Image} a block displayed bullet(Image)\n   */\n  addBulletToText(textBox, bulletType) {\n    if (textBox.removed) {\n      return\n    }\n    const bullet = document.createElement('div')\n\n    let hasStyle = false\n    this.bulletStyles.forEach((stylestr, index) => {\n      if (bulletType == stylestr) {\n        bullet.classList.add('bullet-' + stylestr)\n        hasStyle = true\n        return true\n      }\n    })\n\n    if (!hasStyle) {\n      bullet.classList.add('bullet-dot')\n    }\n\n    textBox.bullet = bullet\n  }\n\n  /**\n   * Add a draggable image\n   * @param {Image} Image object that contains a image\n   * @param {object} coordinates {left: \"123px\", top: \"222px\"}\n   * @returns {object} returns the draggable item\n   */\n  addDraggableImage(coordinates, image) {\n    const img = new _image_view_js__WEBPACK_IMPORTED_MODULE_1__.ImageView(this.draggableFrame, image)\n    this.addDraggableElement(img, coordinates)\n    this.draggableChildren.push(img)\n\n    img.addEventListener('remove', () => {\n      this.removeArrayElement(img, this.draggableChildren)\n    })\n    img.addEventListener('click', () => {\n      this.focusedChild = img\n    })\n    this.focusedChild = img\n  }\n\n  /**\n   * Add a editable and draggable text box\n   * @param {object} coordinates {left: \"123px\", top: \"222px\"}\n   * @returns {object} returns the draggable item\n   */\n  addDraggableTextBox(coordinates) {\n    const textBox = new _text_box_js__WEBPACK_IMPORTED_MODULE_0__.TextBox(this.draggableFrame)\n\n    this.addDraggableElement(textBox, coordinates)\n    textBox.addEventListener('remove', () => {\n      this.removeArrayElement(textBox, this.textBoxes)\n      this.removeArrayElement(textBox, this.draggableChildren)\n    })\n    textBox.addEventListener('focus', () => {\n      this.lastFocusedText = textBox\n    })\n\n    textBox.addEventListener('tabpressed', () => {\n      const newX = this.getNextTabPosition(textBox)\n      //console.log('old: ' + textBox.position.left, textBox.position.top)\n      //console.log('new: ' + newX + 'px', textBox.position.top)\n      textBox.position = { left: newX + 'px', top: textBox.position.top }\n\n      //Change bullet when tab\n      if (textBox.bullet) {\n        let bulletIndex = 0\n        this.bulletStyles.forEach((style, index) => {\n          if (textBox.bullet.classList.contains('bullet-' + style)) {\n            bulletIndex =\n              index < this.bulletStyles.length - 1\n                ? index + 1\n                : this.bulletStyles.length - 1\n            return true\n          }\n        })\n        textBox.removeBullet()\n        this.addBulletToText(textBox, this.bulletStyles[bulletIndex])\n      }\n    })\n\n    textBox.addEventListener('backspace', () => {\n      if (textBox.EmptyContent()) {\n        if (this.lessThanFirstTabPosition(textBox)) {\n          //console.log('first position, delete')\n          if (!textBox.removed) {\n            textBox.removeSelf()\n            this.removeArrayElement(textBox, this.textBoxes)\n            this.removeArrayElement(textBox, this.draggableChildren)\n          }\n        } else {\n          //console.log('Not first position, move left')\n          const newX = this.getPreviousTabPosition(textBox)\n          //console.log(newX)\n          textBox.position = { left: newX + 'px', top: textBox.position.top }\n        }\n      }\n    })\n    textBox.addEventListener('enter', () => {\n      const framePosition = this.draggableFrame.getBoundingClientRect()\n      //console.log('frame: ' + framePosition.x + '  mouse: ' + e.clientX)\n      const textPosition = {\n        left: textBox.position.left,\n        top:\n          parseFloat(textBox.position.top) +\n          textBox.text.getBoundingClientRect().height +\n          this.lineSpacing +\n          'px'\n      }\n      const newTextBox = this.addDraggableTextBox(textPosition)\n      newTextBox.focus()\n      if (textBox.bullet) {\n        this.bulletStyles.forEach((style, index) => {\n          if (textBox.bullet.classList.contains('bullet-' + style)) {\n            this.addBulletToText(newTextBox, style)\n            return true\n          }\n        })\n      }\n    })\n\n    //console.log('new text:' + this.fontSize)\n    textBox.text.style.fontSize = this.fontSize + 'px'\n    textBox.text.style.color = this.textColor\n    textBox.underline = this.underline\n    textBox.bold = this.bold\n    textBox.italic = this.italic\n    this.textBoxes.push(textBox)\n    this.draggableChildren.push(textBox)\n    this.focusedChild = textBox\n\n    /*console.log(\n      'boxes vs children:' +\n        this.textBoxes.length +\n        '|' +\n        this.draggableChildren.length\n    )*/\n\n    return textBox\n  }\n\n  /**\n   * add draggable element to the view\n   *\n   * @param {object} child the wrapper of html element to add into this frame\n   * @param {object} coordinats {left: \"123px\", top: \"356px\"}\n   */\n  addDraggableElement(child, coordinates) {\n    child.position = coordinates\n    this.enableDragAndDrop(child)\n  }\n\n  enableDragAndDrop(child) {\n    child.draggable = false\n    child.addClass('draggable')\n    //this.text.draggable = true\n    //let framePosition = {}\n    let mousePosition = {}\n    child.addEventListener('mousedown', (e) => {\n      //framePosition = this.draggableFrame.getBoundingClientRect()\n      // console.log('mousedown')\n      this.focusedChild = child\n      e.stopPropagation()\n      mousePosition.x = e.clientX\n      mousePosition.y = e.clientY\n      if (!child.isResizing(e.clientX, e.clientY)) {\n        this.mouseEvents.add('mousedown')\n      } else {\n        this.mouseEvents.add('mousedownresize')\n      }\n      this.movingElement.add(child)\n    })\n\n    this.draggableFrame.addEventListener('mousemove', (e) => {\n      if (!this.movingElement.has(child)) return\n      if (this.mouseEvents.has('mousedown')) {\n        if (!this.mouseEvents.has('dragging')) {\n          //console.log('dragstart')\n          this.mouseEvents.add('dragging')\n        }\n        if (!child.hasClass('dragging')) {\n          child.addClass('dragging')\n        }\n        //if (this.bullet && !this.bullet.classList.contains('dragging')) {\n        //  this.bullet.classList.add('dragging')\n        //this.bullet.style.display = 'none'\n        //}\n        this.mouseEvents.delete('mousedown')\n      }\n\n      if (this.mouseEvents.has('dragging')) {\n        //console.log('dragging')\n        e.preventDefault()\n\n        const deltaX = e.clientX - mousePosition.x\n        const deltaY = e.clientY - mousePosition.y\n        mousePosition.x = e.clientX\n        mousePosition.y = e.clientY\n\n        child.position = {\n          left: parseFloat(child.position.left) + deltaX + 'px',\n          top: parseFloat(child.position.top) + deltaY + 'px'\n        }\n        //console.log(this.draggableFrame.getBoundingClientRect())\n      }\n      if (this.mouseEvents.has('mousedownresize')) {\n        if (child instanceof _text_box_js__WEBPACK_IMPORTED_MODULE_0__.TextBox) {\n          child.resized = true\n        } else if (child instanceof _image_view_js__WEBPACK_IMPORTED_MODULE_1__.ImageView) {\n          child.resize(e.clientX, e.clientY)\n        }\n      }\n    })\n\n    window.addEventListener('mouseup', (e) => {\n      if (this.mouseEvents.has('mousedownresize')) {\n        this.mouseEvents.delete('mousedownresize')\n        this.mouseEvents.add('resized')\n      }\n      //console.log('mouseup')\n      if (!this.movingElement.has(child)) return\n      if (this.mouseEvents.has('mousedown')) {\n        this.mouseEvents.delete('mousedown')\n      }\n      if (this.mouseEvents.has('dragging')) {\n        //e.preventDefault()\n        //console.log('add dragged')\n        //console.log(this.mouseEvents)\n        this.mouseEvents.delete('dragging')\n        //console.log(this.mouseEvents)\n        child.removeClass('dragging')\n\n        // if (this.bullet) {\n        // this.bullet.style.display = 'block'\n        //  this.bullet.classList.remove('dragging')\n        // }\n        const deltaX = e.clientX - mousePosition.x\n        const deltaY = e.clientY - mousePosition.y\n        mousePosition.x = e.clientX\n        mousePosition.y = e.clientY\n\n        child.position = {\n          left: parseFloat(child.position.left) + deltaX + 'px',\n          top: parseFloat(child.position.top) + deltaY + 'px'\n        }\n\n        if (child instanceof _image_view_js__WEBPACK_IMPORTED_MODULE_1__.ImageView) {\n          this.mouseEvents.add('imagedragged')\n        }\n\n        if (child instanceof _text_box_js__WEBPACK_IMPORTED_MODULE_0__.TextBox) {\n          this.magneticPositioning(child)\n        }\n        child.focus()\n      }\n      this.movingElement.delete(child)\n    })\n  }\n\n  magneticPositioning(child) {\n    if (!this.enableMagneticPositioning) return\n    const nearest = this.getNearestChild(child)\n    if (nearest) {\n      //console.log('find nearest: ' + nearest.pos)\n      this.moveDraggableChildByAnimation(child, nearest)\n    }\n  }\n\n  /**\n   * move a child to target by animation\n   * @param {object} child a draggable child\n   * @returns {object} {element: node, pos: 123, side: 'bottom'} position related to the viewport\n   */\n  moveDraggableChildByAnimation(child, target) {\n    //console.log('animate..')\n    const childPos = child.text.getBoundingClientRect()\n    switch (target.side) {\n      case 'top':\n        //console.log('animate top..')\n        child.translateY(target.pos + this.lineSpacing)\n        break\n      case 'bottom':\n        //console.log('animate bottom..')\n        child.translateY(\n          target.pos -\n            (parseInt(childPos.bottom) - parseInt(childPos.top)) -\n            this.lineSpacing\n        )\n        break\n      default:\n        //console.log('animate center..')\n        child.translateY(\n          target.pos - (parseInt(childPos.bottom) - parseInt(childPos.top)) / 2\n        )\n    }\n  }\n\n  /**\n   * Helpers\n   */\n\n  /**\n   * Get a nearest draggable element from a child\n   * @param {object} child a draggable child\n   * @returns {object} {element: node, pos: '123px', side: 'bottom'}\n   */\n  getNearestChild(child) {\n    let minDistance = Infinity\n    let nearestChild = undefined\n    //console.log('looking for nearest...')\n    //console.log('draggable children:' + this.draggableChildren.length)\n    const childStyle = child.text.getBoundingClientRect()\n    this.draggableChildren.forEach((dChild, index) => {\n      //console.log('child' + index)\n      if (dChild == child || dChild instanceof _image_view_js__WEBPACK_IMPORTED_MODULE_1__.ImageView) {\n        return\n      }\n\n      const style = dChild.text.getBoundingClientRect()\n\n      //console.log('dchild: ' + style.bottom + '| ' + style.top)\n      //console.log('child: ' + childStyle.bottom + '| ' + childStyle.top)\n      if (style.top && style.bottom) {\n        const distanceBottom = Math.abs(childStyle.bottom - style.top)\n        const distanceTop = Math.abs(childStyle.top - style.bottom)\n        const distanceCenter = Math.abs(\n          (childStyle.top + childStyle.bottom) / 2 -\n            (style.top + style.bottom) / 2\n        )\n\n        /*console.log(\n          'top:' +\n            distanceTop +\n            '| bottom:' +\n            distanceBottom +\n            '| center:' +\n            distanceCenter\n        )*/\n        const minObjectsDistance = Math.min(\n          distanceBottom,\n          distanceTop,\n          distanceCenter\n        )\n\n        //console.log('min distance: ' + minObjectsDistance)\n        if (\n          minObjectsDistance < this.magneticPotentialThreshold &&\n          minObjectsDistance < minDistance\n        ) {\n          //console.log('found nearer')\n          nearestChild = {}\n          minDistance = minObjectsDistance\n          nearestChild.element = dChild\n\n          switch (minObjectsDistance) {\n            case distanceBottom:\n              nearestChild.side = 'bottom'\n              nearestChild.pos = style.top\n              break\n            case distanceTop:\n              nearestChild.side = 'top'\n              nearestChild.pos = style.bottom\n              break\n            default:\n              nearestChild.side = 'cernter'\n              nearestChild.pos = (style.bottom + style.top) / 2\n          }\n        }\n      }\n    })\n    return nearestChild\n  }\n\n  removeArrayElement(element, array) {\n    const index = array.indexOf(element)\n    if (index != -1) {\n      array.splice(index, 1)\n    }\n  }\n\n  lessThanFirstTabPosition(textBox) {\n    const firstPosition = this.defaultPadding + this.bulletMargin\n\n    //console.log(textBox.text.offsetLeft + '|' + firstPosition)\n    return textBox.text.offsetLeft <= firstPosition\n  }\n\n  /**\n   * Calculate the previous tab position\n   * @param {object} childPosition the object return by the getBoundingClientRect() method\n   * @returns {number} the horizontal previous position relative to the parent\n   */\n  getPreviousTabPosition(textBox) {\n    const tabIndex = Math.ceil(\n      (textBox.text.offsetLeft - this.defaultPadding - this.bulletMargin) /\n        (this.baselineFontSize * this.defaultTabSize) -\n        1.0\n    )\n    //console.log('index:' + tabIndex)\n    return (\n      this.defaultPadding +\n      this.bulletMargin +\n      tabIndex * (this.baselineFontSize * this.defaultTabSize)\n    )\n  }\n\n  /**\n   * Calculate the next tab position\n   * @param {object} textBox\n   * @returns {number} the horizontal position relative to the parent\n   */\n  getNextTabPosition(textBox) {\n    const tabIndex = Math.floor(\n      (textBox.text.offsetLeft - this.defaultPadding - this.bulletMargin) /\n        (this.baselineFontSize * this.defaultTabSize) +\n        1.0\n    )\n    return (\n      this.defaultPadding +\n      this.bulletMargin +\n      tabIndex * (this.baselineFontSize * this.defaultTabSize)\n    )\n  }\n\n  toggleUnderline() {\n    this.underline = this.underline ? false : true\n    if (this.lastFocusedText) {\n      this.lastFocusedText.underline = this.underline\n    }\n  }\n\n  toggleBold() {\n    this.bold = this.bold ? false : true\n    if (this.lastFocusedText) {\n      this.lastFocusedText.bold = this.bold\n    }\n  }\n\n  toggleItalic() {\n    this.italic = this.italic ? false : true\n    if (this.lastFocusedText) {\n      this.lastFocusedText.italic = this.italic\n    }\n  }\n\n  /**\n   * Setter and getter\n   */\n\n  set textOnClick(isTextOnClick) {\n    this.createTextOnClick = isTextOnClick\n  }\n\n  get textOnClick() {\n    return this.createTextOnClick\n  }\n\n  set fontSize(fontSize) {\n    this.fontSz = fontSize\n\n    if (this.lastFocusedText) {\n      //console.log('change font size to ' + this.fontSize)\n      this.lastFocusedText.text.style.fontSize = this.fontSize + 'px'\n      this.lastFocusedText.resizeToFitText()\n    }\n  }\n\n  get fontSize() {\n    return this.fontSz\n  }\n\n  set textColor(textColor) {\n    this.txtColor = textColor\n\n    if (this.lastFocusedText) {\n      //console.log('change text color to ' + this.textColor)\n      this.lastFocusedText.text.style.color = this.textColor\n    }\n    //TODO change current text font size\n  }\n\n  get textColor() {\n    return this.txtColor\n  }\n}\n\ncustomElements.get('drag-view') || customElements.define('drag-view', DragView)\n\n\n//# sourceURL=webpack://source/./js/widgets/drag-view.js?");

/***/ }),

/***/ "./js/widgets/image-view.js":
/*!**********************************!*\
  !*** ./js/widgets/image-view.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageView\": () => (/* binding */ ImageView)\n/* harmony export */ });\nclass ImageView {\n  constructor(draggableFrame, img) {\n    this.draggableFrame = draggableFrame\n    this.imageListeners = []\n    this.image = img\n\n    this.observers = {\n      mousedown: [],\n      remove: [],\n      click: []\n      //delete: []\n    }\n    /*\n    this.removed = false\n    this.keydowns = new Set()\n    this.dragThreshold = 5\n    */\n\n    this.hasFocus = false\n    this.resizingWidth = 10\n    this.initializeImage()\n    this.initializeListeners()\n    this.setEventListeners()\n  }\n\n  initializeListeners() {\n    this.imageListeners.push({\n      eventType: 'mousedown',\n      callback: (e) => {\n        this.observers.mousedown.forEach((cb, i) => {\n          cb(e)\n        })\n      }\n    })\n    this.imageListeners.push({\n      eventType: 'click',\n      callback: (e) => {\n        this.observers.click.forEach((cb, i) => {\n          cb(e)\n        })\n      }\n    })\n  }\n\n  setEventListeners() {\n    this.imageListeners.forEach((listener, index) => {\n      this.img.removeEventListener(listener.eventType, listener.callback)\n      this.img.addEventListener(listener.eventType, listener.callback)\n    })\n  }\n\n  removeSelf() {\n    this.removed = true\n    this.draggableFrame.removeChild(this.img)\n    this.observers.remove.forEach((callback, i) => {\n      callback()\n    })\n  }\n\n  initializeImage() {\n    this.img.classList.add('image')\n    this.draggableFrame.appendChild(this.img)\n\n    this.img.addEventListener('mousemove', (e) => {\n      //console.log('resize')\n      if (!this.isResizing(e.clientX, e.clientY)) {\n        this.img.style.cursor = 'pointer'\n      } else {\n        this.img.style.cursor = 'nwse-resize'\n      }\n    })\n  }\n\n  addEventListener(eventType, callback) {\n    this.observers[eventType].push(callback)\n  }\n\n  removeEventListener(eventType, callback) {\n    this.observers[eventType].forEach((c, i) => {\n      if (callback == c) {\n        this.observers[eventType].splice(i, 0)\n        return false\n      }\n    })\n  }\n\n  // removeAllListeners() {\n  //  this.observers = { remove: [], focus: [] }\n  // }\n\n  addClass(cl) {\n    this.img.classList.add(cl)\n  }\n\n  hasClass(cl) {\n    return this.img.classList.contains(cl)\n  }\n\n  removeClass(cl) {\n    this.img.classList.remove(cl)\n  }\n\n  focus() {\n    this.img.focus()\n  }\n  isResizing(x, y) {\n    const box = this.img.getBoundingClientRect()\n    return (\n      x >= box.right - this.resizingWidth &&\n      x <= box.right &&\n      y >= box.bottom - this.resizingWidth &&\n      y <= box.bottom\n    )\n  }\n\n  set draggable(dg) {\n    this.img.draggable = dg\n  }\n\n  resize(x, y) {\n    // console.log('client:' + x + '|' + y)\n    this.img.style.width = window.getComputedStyle(this.img).width\n    this.img.style.height = window.getComputedStyle(this.img).height\n    // console.log(\n    //   'original:' + this.img.style.width + '|' + this.img.style.height\n    // )\n\n    this.img.style.width = x - this.img.getBoundingClientRect().left + 'px'\n    this.img.style.height = y - this.img.getBoundingClientRect().top + 'px'\n    //console.log('changed:' + this.img.style.width + '|' + this.img.style.height)\n  }\n\n  /**\n   * Set the position of the text relative to its parent\n   * @param {object} coordinates {left: '123px', top: '1231px'}\n   */\n  set position(coordinates) {\n    const framePosition = this.draggableFrame.getBoundingClientRect()\n    if (\n      parseFloat(coordinates.left) < 0 ||\n      parseFloat(coordinates.left) + this.img.getBoundingClientRect().width >\n        framePosition.width ||\n      parseFloat(coordinates.top) < 0 ||\n      parseFloat(coordinates.top) + this.img.getBoundingClientRect().height >\n        framePosition.height\n    ) {\n      return\n    }\n\n    this.pos = coordinates\n    this.img.style.left = coordinates.left\n    this.img.style.top = coordinates.top\n  }\n\n  get position() {\n    return this.pos\n  }\n\n  set image(img) {\n    this.img = img\n  }\n\n  get image() {\n    this.img\n  }\n}\n\n\n//# sourceURL=webpack://source/./js/widgets/image-view.js?");

/***/ }),

/***/ "./js/widgets/right-pane.js":
/*!**********************************!*\
  !*** ./js/widgets/right-pane.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RightPane\": () => (/* binding */ RightPane)\n/* harmony export */ });\nclass RightPane extends HTMLElement {\n    constructor() {\n      super()\n      const template = document.createElement('template')\n      template.innerHTML = `\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n        <style>\n                *{\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                    font-family: 'Quicksand', sans-serif;\n                } \n\n                html{\n                    font-size: 62.5%;\n                }\n\n                .container{\n                    width: 414px;\n                    height: 800px;\n                    top: 111px;\n                    left: 1506px;\n                    background-color: rgba(171,187,175,1);#f44336;\n                    color: #333;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    border-radius: 60px;\n                }\n                .pane{\n                    background-color: rgb(171,187,175);\n                    position: absolute;\n                    /*overflow: visible; */\n                    width: 414px;\n                    height: 800px;\n                    left: 1475px;\n                    top: 120px;\n                    border-radius: 60px;\n\t            }\n\n                .calendar{\n                    width: 350px;\n\t                height: 400px;\n                    position: relative; top: -17.5%;\n                    background-color: #ccc;\n                    box-shadow: 0 0.5rem 3rem rgba(0,0,0,.4);\n                    border-radius: 10px;\n                }\n\n                .month{\n                    width: 100%;\n                    height: 65px;\n                    background-color: #aaa;\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    padding: 0 2rem;\n                    text-align: center;\n                    text-shadow: 0 .2rem .9rem rgba(0,0,0,.5);\n                    border-top-left-radius: 10px;\n                    border-top-right-radius: 10px;\n                }\n\n                .month i{\n                    font-size: 2rem;\n                    cursor: pointer;     /* change ur cursor to a pointer*/\n                }\n\n                .month h1{\n                    font-size: 1.5rem;\n                    font-weight: 500;    /* boldness */\n                    text-transform: uppercase;\n                    letter-spacing: 0.2rem;\n                    margin-bottom: 0.2rem;\n                }\n\n                .month p{\n                    font-size: 1.2rem;\n                }\n\n                .weekdays{\n                    width: 100%;\n                    height: 3rem;\n                    margin-bottom: -0.3rem;\n                    padding: 0 0.4rem;\n                    display: flex;\n                    align-items: center;\n                }\n\n                .weekdays div{\n                    font-size: 1.2rem;\n                    font-weight: 400;\n                    letter-spacing: 0.1rem;\n                    width: calc(25rem / 7);\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    text-shadow: 0 .3rem .5rem rgba(0,0,0,0.5rem);\n                }\n\n                .days{\n                    width: 100%;\n                    display: flex;\n                    flex-wrap: wrap;\n                    padding: 0.2rem;\n                }\n\n                .days div:not(.today){\n                    font-size: 1rem;\n                    margin: 0.2rem;\n                    width: calc(18.5rem / 7);\n                    height: 2.5rem;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    text-shadow: 0 .2rem .9rem rgba(0,0,0,.5);\n                    transition: background-color 0.2s;\n                    background-color: rgb(242, 242, 242);\n                    text-color: black;\n                }\n\n                /*if not today */\n                .days div:hover:not(.today){\n                    border: .2rem solid#777;\n                    cursor: pointer;\n                }\n\n                .prev-date,\n                .next-date{\n                    opacity: 0.5;\n\n                }\n\n                .today{\n                    background-color: #f39507;\n                    font-size: 1rem;\n                    margin: 0.2rem;\n                    width: calc(18.5rem / 7);\n                    height: 2.5rem;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    text-shadow: 0 .2rem .9rem rgba(0,0,0,.5);\n                    transition: background-color 0.2s;\n                    text-color: white;\n                }\n\n                \n\n        </style>\n        <div class=\"pane\">\n         <div class=\"container\">\n            <div class=\"calendar\">\n                <div class=\"month\">\n                    <i class=\"fas fa-angle-left \n                    prev\"></i>     <!--Prev Month-->\n                    <div class=\"date\">\n                        <h1></h1>  <!--Month-->\n                        <p></p>    <!--Sun MM DD YY-->\n                    </div>\n                    <i class=\"fas fa-angle-right \n                    next\"></i>    <!--Next Month-->\n                </div>\n                <div class=\"weekdays\">\n                    <div>Sun</div>\n                    <div>Mon</div>\n                    <div>Tue</div>\n                    <div>Wed</div>\n                    <div>Thu</div>\n                    <div>Fri</div>\n                    <div>Sat</div>\n                </div>\n                <div class=\"days\">\n                \n            </div>\n        </div>\n    </div>\n    </div>\n\n\n      `\n      \n      /*<script>\n        var script = document.createElement('script');\n        script.src = \"widgets/script.js\";\n        document.getElementsByTagName('head')[0].appendChild(script);\n    </script> */\n\n\n    \n      const link = document.createElement('link')\n      link.setAttribute('rel', 'stylesheet')\n     /* link.setAttribute('href', 'styles/calendar.css')*/\n      link.setAttribute('href', 'style.css')\n\n      \n  \n      this.attachShadow({ mode: 'open' })\n      this.shadowRoot.appendChild(link)\n      this.shadowRoot.appendChild(template.content.cloneNode(true))\n\n     \n    \n    \n    \n    const date = new Date();\n\n    const renderCalendar = () => {\n    date.setDate(1);\n        console.log(\"in  render cal\")\n        console.log(this.shadowRoot.querySelector('.days'));\n        const monthDays = this.shadowRoot.querySelector('.days');\n\n        const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n\n        const prevLastDay = new Date(date.getFullYear(), date.getMonth(), 0).getDate();\n\n        const firstDayIndex = date.getDay();\n\n        const lastDayIndex = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDay();\n\n        const nextDays = 7 -lastDayIndex - 1;\n\n        const months = [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\",\n        ];\n\n        this.shadowRoot.querySelector('.date h1').innerHTML\n        = months[date.getMonth()];\n\n        this.shadowRoot.querySelector('.date p').innerHTML\n        = new Date().toDateString();\n\n        let days = \"\";\n\n        for(let x = firstDayIndex; x > 0; x--){\n            days += `<div class='prev-date'>${prevLastDay - x + 1}</div>`;\n        }\n\n        for(let i = 1; i <= lastDay; i++){\n            if( i === new Date().getDate() && date.getMonth() === new Date().getMonth() ){\n                days += `<div class='today'>${i}</div>`;\n            } else{\n                days += `<div>${i}</div>`;\n            }\n        \n        }\n\n        for(let j = 1; j <= nextDays; j++)\n        {\n            days += `<div class='next-date'>${j}</div>`;\n            monthDays.innerHTML = days;\n        }\n   }\n   \n   console.log(this.shadowRoot.querySelector('.prev'));\n    \n    this.shadowRoot.querySelector('.prev').addEventListener('click', ()=>{\n        date.setMonth(date.getMonth() - 1);\n        renderCalendar();\n    })\n\n    this.shadowRoot.querySelector('.next').addEventListener('click', ()=>{\n        date.setMonth(date.getMonth() + 1);\n        renderCalendar();\n    })\n\n    renderCalendar();\n\n  }    \n}\n\n\n  customElements.define('right-pane', RightPane)\n\n//# sourceURL=webpack://source/./js/widgets/right-pane.js?");

/***/ }),

/***/ "./js/widgets/text-box.js":
/*!********************************!*\
  !*** ./js/widgets/text-box.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextBox\": () => (/* binding */ TextBox)\n/* harmony export */ });\nclass TextBox {\n  constructor(draggableFrame, bullet) {\n    if (draggableFrame) {\n      this.draggableFrame = draggableFrame\n    }\n    if (bullet) {\n      this.blt = bullet\n    }\n    this.textListeners = []\n    this.bulletMargin = 10\n\n    this.observers = {\n      remove: [],\n      focus: [],\n      blur: [],\n      tabpressed: [],\n      dragend: [],\n      backspace: [],\n      enter: [],\n      shiftenter: [],\n      mousedown: []\n    }\n    this.removed = false\n    this.keydowns = new Set()\n    this.dragThreshold = 5\n    this.resizingWidth = 8\n    this.resized = false\n\n    this.initializeText()\n    this.initializeEventListeners()\n    this.setEventListeners()\n  }\n\n  initializeText() {\n    this.text = document.createElement('textarea')\n    this.text.spellcheck = false\n    this.text.classList.add('textbox')\n    this.text.style.background = 'transparent'\n    this.draggableFrame.appendChild(this.text)\n    this.lastScrollHeight = this.text.scrollHeight\n    this.textPadding = parseFloat(\n      window.getComputedStyle(this.text).getPropertyValue('padding-top')\n    )\n\n    //console.log(this.textPadding, this.lastScrollHeight)\n    /*console.log(\n      'height:' + this.lastTextHeight + ',' + 'extra:' + this.extraHeight\n    )*/\n  }\n\n  removeBullet() {\n    this.draggableFrame.removeChild(this.blt)\n    this.blt = undefined\n  }\n\n  set bullet(bullet) {\n    if (this.bullet) {\n      this.removeBullet()\n    }\n    this.blt = bullet\n    this.draggableFrame.appendChild(this.blt)\n    const bulletStyle = window.getComputedStyle(this.blt)\n    const textStyle = window.getComputedStyle(this.text)\n    //console.log('bulletheight: ' + bulletStyle.height)\n    //console.log('bulletheight: ' + textStyle.top)\n    this.bulletHeight = parseFloat(bulletStyle.height)\n    this.bulletWidth = parseFloat(bulletStyle.width)\n\n    const topBulletMargin =\n      parseFloat(textStyle.getPropertyValue('padding-top')) +\n      0.6 * parseFloat(textStyle.fontSize) -\n      this.bulletHeight / 2\n    //console.log('textpadding: ' + textStyle.getPropertyValue('padding-top'))\n    this.blt.style.top = parseFloat(textStyle.top) + topBulletMargin + 'px'\n    this.blt.style.left =\n      parseFloat(textStyle.left) -\n      this.bulletWidth / 2 -\n      this.bulletMargin +\n      'px'\n\n    //console.log(this.bulletHeight)\n    //console.log(topBulletMargin)\n    //console.log(textStyle.top)\n\n    this.setEventListeners()\n  }\n\n  get bullet() {\n    return this.blt\n  }\n\n  set draggable(dg) {\n    this.text.draggable = dg\n  }\n\n  initializeEventListeners() {\n    this.text.addEventListener('mousedown', (e) => {\n      this.observers.mousedown.forEach((cb, i) => {\n        cb(e)\n      })\n    })\n    this.textListeners.push({\n      eventType: 'click',\n      callback: (e) => {\n        e.stopImmediatePropagation()\n      }\n    })\n\n    this.textListeners.push({\n      eventType: 'mouseover',\n      callback: (e) => {\n        this.text.classList.add('mouse-over')\n      }\n    })\n    this.textListeners.push({\n      eventType: 'mouseleave',\n      callback: (e) => {\n        this.text.classList.remove('mouse-over')\n      }\n    })\n\n    this.textListeners.push({\n      eventType: 'focus',\n      callback: (e) => {\n        //console.log('focus')\n        this.text.classList.add('focus')\n        this.text.style.resize = 'both'\n        this.observers.focus.forEach((cb, i) => {\n          cb()\n        })\n      }\n    })\n\n    this.textListeners.push({\n      eventType: 'blur',\n      callback: (e) => {\n        //console.log('blur')\n        this.observers.blur.forEach((cb, i) => {\n          cb()\n        })\n        if (\n          !this.removed &&\n          this.hasNothing() /*&&\n          !this.text.classList.contains('mouse-over')*/\n        ) {\n          this.removeSelf()\n        } else {\n          this.text.classList.remove('focus')\n        }\n        this.text.style.resize = 'none'\n      }\n    })\n    this.textListeners.push({\n      eventType: 'keydown',\n      callback: (e) => {\n        this.keydowns.add(e.key)\n        this.resizeToFitText()\n        //console.log(this.text.value.includes('\\n'))\n\n        switch (e.key) {\n          // case 'Delete':\n          //   //console.log('delete')\n          //   this.removeSelf()\n          //   break\n          case 'Tab':\n            e.preventDefault()\n            //console.log('Tab')\n            this.observers.tabpressed.forEach((callback, i) => {\n              callback()\n            })\n            break\n          case 'Backspace':\n            //console.log('Backspace')\n            this.observers.backspace.forEach((callback, i) => {\n              callback()\n            })\n            break\n          case 'Enter':\n            if (this.keydowns.has('Shift')) {\n              //console.log('Shift + Enter')\n              this.observers.shiftenter.forEach((callback, i) => {\n                callback()\n              })\n            } else {\n              //console.log('Enter')\n              e.preventDefault()\n              this.observers.enter.forEach((callback, i) => {\n                callback()\n              })\n            }\n            break\n        }\n      }\n    })\n\n    this.textListeners.push({\n      eventType: 'keyup',\n      callback: (e) => {\n        this.keydowns.delete(e.key)\n        this.resizeToFitText()\n      }\n    })\n  }\n\n  resizeToFitText() {\n    // console.log(\n    //   'resize?' + this.lastScrollHeight + '| ' + this.text.scrollHeight\n    // )\n    if (this.text.scrollHeight != this.lastScrollHeight) {\n      //console.log(this.resized)\n      if (!this.resized) {\n        //console.log('resize:' + this.text.style.height)\n        this.text.style.height =\n          parseFloat(window.getComputedStyle(this.text).height) +\n          parseFloat(this.text.scrollHeight) -\n          parseFloat(this.lastScrollHeight) +\n          'px'\n      } else {\n        this.resized = false\n      }\n      //console.log('final:' + this.text.style.height)\n      this.lastScrollHeight = this.text.scrollHeight\n    }\n  }\n\n  removeSelf() {\n    this.removed = true\n    //console.log('remove')\n    this.draggableFrame.removeChild(this.text)\n    if (this.bullet) {\n      this.draggableFrame.removeChild(this.bullet)\n    }\n    this.observers.remove.forEach((callback, i) => {\n      callback()\n    })\n  }\n\n  setEventListeners() {\n    this.textListeners.forEach((listener, index) => {\n      this.text.removeEventListener(listener.eventType, listener.callback)\n      this.text.addEventListener(listener.eventType, listener.callback)\n    })\n  }\n\n  /**\n   * Set the position of the text relative to its parent\n   * @param {object} coordinates {left: '123px', top: '1231px'}\n   */\n  set position(coordinates) {\n    const framePosition = this.draggableFrame.getBoundingClientRect()\n    /*console.log(\n      -1.0 * parseFloat(window.getComputedStyle(this.text).width),\n      parseFloat(coordinates.left)\n    )*/\n\n    if (\n      parseFloat(coordinates.left) <\n        -1.0 * parseFloat(window.getComputedStyle(this.text).width) ||\n      parseFloat(coordinates.left) > framePosition.width ||\n      parseFloat(coordinates.top) <\n        -1.0 * parseFloat(window.getComputedStyle(this.text).height) ||\n      parseFloat(coordinates.top) > framePosition.height\n    ) {\n      return\n    }\n\n    if (this.bullet) {\n      this.bullet.style.left =\n        parseFloat(this.bullet.style.left) +\n        parseFloat(coordinates.left) -\n        parseFloat(this.pos.left) +\n        'px'\n      this.bullet.style.top =\n        parseFloat(this.bullet.style.top) +\n        parseFloat(coordinates.top) -\n        parseFloat(this.pos.top) +\n        'px'\n    }\n\n    this.pos = coordinates\n    this.text.style.left = coordinates.left\n    this.text.style.top = coordinates.top\n  }\n\n  get position() {\n    return this.pos\n  }\n\n  /**\n   * translate vertically\n   * @param {number} targetX position in the viewport\n   * @param {number} targetY position in the viewport\n   * @param {number} speed px / second\n   */\n  translateY(targetY) {\n    //console.log('target position:' + targetY)\n    const deltaY = targetY - this.text.getBoundingClientRect().top\n    const anims = []\n    anims.push(\n      this.text.animate([{ transform: 'translateY(' + deltaY + 'px)' }], {\n        duration: 50\n      }).finished\n    )\n\n    if (this.bullet) {\n      anims.push(\n        this.bullet.animate(\n          [\n            {\n              transform: 'translateY(' + deltaY + 'px)'\n            }\n          ],\n          {\n            duration: 50\n          }\n        ).finished\n      )\n    }\n\n    Promise.all(anims).then((data) => {\n      this.position = {\n        left: this.position.left,\n        top: parseFloat(this.position.top) + deltaY + 'px'\n      }\n    })\n  }\n\n  /**\n   * Euclidean distance\n   * @param {number} x e.clientX\n   * @param {number} y e.clientY\n   * @param {object} lastPosition {x: 123, y:2323}\n   * @returns {number} distance\n   */\n  mouseMoveDistance(x, y, lastPosition) {\n    return Math.sqrt(\n      Math.pow(lastPosition.x - x, 2) + Math.pow(lastPosition.y - y, 2)\n    )\n  }\n\n  addEventListener(eventType, callback) {\n    this.observers[eventType].push(callback)\n  }\n\n  removeEventListener(eventType, callback) {\n    this.observers[eventType].forEach((c, i) => {\n      if (callback == c) {\n        this.observers[eventType].splice(i, 0)\n        return false\n      }\n    })\n  }\n\n  removeAllListeners() {\n    this.observers = { remove: [], focus: [] }\n  }\n\n  focus() {\n    this.text.focus()\n  }\n\n  hasNothing() {\n    return this.text.value === '' && !this.bullet\n  }\n\n  EmptyContent() {\n    return this.text.value === ''\n  }\n\n  onDraggableFrameMouseOut() {\n    //console.log('mouseout!')\n    this.textListeners.forEach((listener, index) => {\n      this.text.removeEventListener(listener.eventType, listener.callback)\n    })\n  }\n\n  onDraggableFrameMouseEnter() {\n    //console.log('mousein!')\n    this.setEventListeners()\n  }\n\n  addClass(cl) {\n    this.text.classList.add(cl)\n  }\n\n  hasClass(cl) {\n    return this.text.classList.contains(cl)\n  }\n\n  removeClass(cl) {\n    this.text.classList.remove(cl)\n  }\n\n  isResizing(x, y) {\n    const box = this.text.getBoundingClientRect()\n    return (\n      x >= box.right - this.resizingWidth &&\n      x <= box.right &&\n      y >= box.bottom - this.resizingWidth &&\n      y <= box.bottom\n    )\n  }\n\n  /**\n   * Getters and Setters\n   */\n\n  set bold(isBold) {\n    this.text.style.fontWeight = isBold ? 'bold' : 'normal'\n  }\n  set italic(isItalic) {\n    this.text.style.fontStyle = isItalic ? 'italic' : 'normal'\n  }\n  set underline(isUnderline) {\n    this.text.style.textDecoration = isUnderline ? 'underline' : 'none'\n  }\n}\n\n\n//# sourceURL=webpack://source/./js/widgets/text-box.js?");

/***/ }),

/***/ "./js/widgets/toolbar.js":
/*!*******************************!*\
  !*** ./js/widgets/toolbar.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ToolBar\": () => (/* binding */ ToolBar)\n/* harmony export */ });\nclass ToolBar extends HTMLElement {\n  constructor() {\n    super()\n    console.log('toolbar constr called')\n    const template = document.createElement('template')\n    template.innerHTML = `\n\n        <div class=\"tool-bar\">\n          <button class=\"tool selected-tool\" id=\"text-tool\">\n            <svg class=\"icon-text\" viewBox=\"0 0 36 36\">\n              <path id=\"icon-text\" d=\"M 0 0 L 0 9 L 2.25 9 C 2.25 6.525000095367432 4.275000095367432 4.5 6.75 4.5 L 13.5 4.5 L 13.5 29.25 C 13.5 30.51000022888184 12.51000022888184 31.5 11.25 31.5 L 9 31.5 L 9 36 L 27 36 L 27 31.5 L 24.75 31.5 C 23.48999977111816 31.5 22.5 30.51000022888184 22.5 29.25 L 22.5 4.5 L 29.25 4.5 C 31.72500038146973 4.5 33.75 6.525000095367432 33.75 9 L 36 9 L 36 0 L 0 0 Z\">\n              </path>\n\t          </svg>\n          </button>\n\n          <button class=\"tool\" id=\"image-tool\">\n            <svg class=\"Icon_material-image\" viewBox=\"4.5 4.5 27 27\">\n              <path id=\"Icon_material-image\" d=\"M 31.5 28.5 L 31.5 7.5 C 31.5 5.849999904632568 30.14999961853027 4.5 28.5 4.5 L 7.5 4.5 C 5.849999904632568 4.5 4.5 5.849999904632568 4.5 7.5 L 4.5 28.5 C 4.5 30.14999961853027 5.849999904632568 31.5 7.5 31.5 L 28.5 31.5 C 30.14999961853027 31.5 31.5 30.14999961853027 31.5 28.5 Z M 12.75 20.25 L 16.5 24.76499938964844 L 21.75 18 L 28.5 27 L 7.5 27 L 12.75 20.25 Z\">\n              </path>\n\t          </svg>\n          </button>\n\n          <button class=\"tool\" id=\"bullets-tool\">\n            <svg class=\"icon-bullet\" viewBox=\"2 2 50 50\">\n              <path id=\"icon-bullet\" d=\"M 4 4 C 1.800781 4 0 5.800781 0 8 C 0 10.199219 1.800781 12 4 12 C 6.199219 12 8 10.199219 8 8 C 8 5.800781 6.199219 4 4 4 Z M 12 6 L 12 10 L 50 10 L 50 6 Z M 4 21 C 1.800781 21 0 22.800781 0 25 C 0 27.199219 1.800781 29 4 29 C 6.199219 29 8 27.199219 8 25 C 8 22.800781 6.199219 21 4 21 Z M 12 23 L 12 27 L 50 27 L 50 23 Z M 4 38 C 1.800781 38 0 39.800781 0 42 C 0 44.199219 1.800781 46 4 46 C 6.199219 46 8 44.199219 8 42 C 8 39.800781 6.199219 38 4 38 Z M 12 40 L 12 44 L 50 44 L 50 40 Z\">\n              </path>\n            </svg>\n          </button>\n\n          <button class=\"tool\" id=\"bold-tool\">\n            <svg class=\"icon-bold\" viewBox = \"0 0 125 125\">\n              <path d=\"M78.65,57.74c11.66,2.69,19.86,6,24.56,9.87c6.77,5.51,10.14,12.62,10.14,21.37c0,9.25-3.71,16.89-11.13,22.92 c-9.12,7.33-22.39,10.98-39.77,10.98H0v-3.34c5.69,0,9.52-0.53,11.57-1.61c2.01-1.05,3.43-2.41,4.24-4.11 c0.83-1.7,1.24-5.85,1.24-12.49V21.59c0-6.65-0.4-10.83-1.24-12.56C15,7.3,13.55,5.94,11.5,4.92C9.46,3.87,5.63,3.37,0,3.37L0,0 h58.89c14.07,0,24.06,1.27,29.91,3.78c5.88,2.51,10.49,6.25,13.86,11.23c3.4,4.98,5.07,10.3,5.07,15.9c0,5.94-2.13,11.2-6.43,15.84 C97.02,51.34,89.47,55.02,78.65,57.74L78.65,57.74z M45.68,55.27c8.57,0,14.88-0.96,18.96-2.88c4.08-1.95,7.21-4.67,9.4-8.17 c2.17-3.49,3.25-7.98,3.25-13.42c0-5.41-1.08-9.86-3.22-13.36c-2.13-3.46-5.19-6.09-9.18-7.92C60.9,7.7,54.5,6.84,45.68,6.9V55.27 L45.68,55.27L45.68,55.27z M45.68,62.35v39.4l-0.09,4.55c0,3.25,0.8,5.72,2.48,7.39c1.67,1.64,4.11,2.47,7.39,2.47 c4.82,0,9.28-1.05,13.36-3.22c4.08-2.13,7.2-5.26,9.37-9.34c2.2-4.05,3.28-8.6,3.28-13.61c0-5.75-1.33-10.92-3.99-15.46 c-2.66-4.55-6.31-7.73-10.98-9.56C61.86,63.16,54.9,62.29,45.68,62.35L45.68,62.35L45.68,62.35z\">\n              </path>\n            </svg>\n          </button>\n\n          <button class=\"tool\" id=\"italics-tool\">\n            <svg class=\"icon-italics\" viewBox = \"0 0 125 125\">\n              <path d=\"M32.16,3.37L33.16,0h60l-1.18,3.37c-5.44,0-9.59,1.21-12.46,3.62c-2.88,2.41-5.38,7.45-7.58,15.13l-22.45,78.65 c-1.64,5.57-2.44,9.28-2.44,11.13c0,2.19,0.83,3.86,2.54,5.1c2.17,1.55,6.28,2.41,12.31,2.54l-0.9,3.34H0l0.99-3.34 c6.13,0,10.58-1.18,13.42-3.5c2.85-2.32,5.42-7.42,7.7-15.28l22.64-78.65c1.39-4.83,2.1-8.48,2.1-10.95c0-2.26-0.87-3.99-2.54-5.26 C42.62,4.64,38.57,3.78,32.16,3.37L32.16,3.37L32.16,3.37z\">\n              </path>\n            </svg>\n          </button>\n\n          <button class=\"tool\" id=\"underline-tool\">\n            <svg class=\"icon-underline\" viewBox = \"0 0 125 125\">\n              <path d=\"M3.62,0h52.58v2.8h-2.62c-3.95,0-6.67,0.41-8.16,1.23C43.93,4.85,42.88,6,42.27,7.44c-0.61,1.46-0.95,5.1-0.95,10.9v49.88 c0,9.13,0.69,15.16,2.08,18.13c1.39,2.95,3.64,5.39,6.8,7.36c3.15,1.95,7.13,2.92,11.95,2.92c5.51,0,10.21-1.23,14.08-3.72 c3.9-2.49,6.8-5.9,8.72-10.26c1.92-4.36,2.9-11.95,2.9-22.78V18.34c0-4.57-0.49-7.82-1.44-9.77c-0.95-1.95-2.16-3.31-3.59-4.05 c-2.26-1.15-5.44-1.72-9.57-1.72V0h35.24v2.8h-2.1c-2.85,0-5.23,0.57-7.13,1.72c-1.9,1.15-3.28,2.87-4.13,5.18 c-0.64,1.62-0.97,4.49-0.97,8.64v38.7c0,11.98-0.79,20.62-2.36,25.93c-1.59,5.31-5.44,10.18-11.54,14.64 c-6.1,4.46-14.47,6.69-25.03,6.69c-8.8,0-15.62-1.18-20.44-3.54c-6.54-3.21-11.18-7.31-13.9-12.31 c-2.69-5.03-4.05-11.75-4.05-20.24V18.34c0-5.85-0.31-9.49-0.97-10.93C15.21,5.98,14.08,4.85,12.46,4 C10.87,3.13,7.92,2.74,3.62,2.8V0L3.62,0z M0,115.89h111.13v7H0V115.89L0,115.89z\">\n              </path>\n            </svg>\n          \n        </button>\n        <div class=\"tool\" id=\"text-size\" >\n          <input type=\"number\" value=\"20\" id=\"text-size-sel\" width=\"10px\">\n\n          </input>\n        </div>\n        <div class=\"tool\" id=\"text-color\">\n          <select name=\"text-color\" id=\"text-color-sel\" margin-left: 30px\">\n            <option value=\"black\">Black</option>\n            <option value=\"blue\">Blue</option>\n            <option value=\"red\">Red</option>\n            <option value=\"white\">White</option>\n            <option value=\"brown\">Brown</option>\n            <option value=\"purple\">Purple</option>\n          </select>\n      </div>\n      <input\n      type=\"file\"\n      accept=\"image/gif, image/jpeg, image/png\"\n      name=\"image\"\n      id=\"image-input\"\n      style=\"display: none\"\n    />\n    </div>\n    `\n\n    // template.addEventListener('click',editPage());\n\n    const link = document.createElement('link')\n    link.setAttribute('rel', 'stylesheet')\n    link.setAttribute('href', 'styles/toolbar.css')\n\n    this.attachShadow({ mode: 'open' })\n    this.shadowRoot.appendChild(link)\n    this.shadowRoot.appendChild(template.content.cloneNode(true))\n\n    this.textTool = this.shadowRoot.querySelector('#text-tool')\n    this.imageInput = this.shadowRoot.querySelector('#image-input')\n    this.imageTool = this.shadowRoot.querySelector('#image-tool')\n    this.bulletsTool = this.shadowRoot.querySelector('#bullets-tool')\n    this.boldTool = this.shadowRoot.querySelector('#bold-tool')\n    this.italicsTool = this.shadowRoot.querySelector('#italics-tool')\n    this.underlineTool = this.shadowRoot.querySelector('#underline-tool')\n    this.textSize = this.shadowRoot.querySelector('#text-size-sel')\n    this.textColor = this.shadowRoot.querySelector('#text-color-sel')\n\n    this.observers = {\n      textclicked: [],\n      imageclicked: [],\n      bulletclicked: [],\n      boldclicked: [],\n      italicclicked: [],\n      underlineclicked: [],\n      sizeclicked: [],\n      colorclicked: []\n    }\n\n    this.setupListeners()\n  }\n\n  setupListeners() {\n    // Tool bar\n    // Text Tool\n    this.textTool.addEventListener('click', (event) => {\n      this.selectTool(this.textTool)\n      this.observers.textclicked.forEach((cb, i) => {\n        cb(event)\n      })\n    })\n\n    //Image Tool\n    this.imageInput.addEventListener('change', (e) => {\n      const img = new Image()\n      img.src = URL.createObjectURL(e.target.files[0])\n      this.observers.imageclicked.forEach((cb, i) => {\n        cb(img, e)\n      })\n    })\n    this.imageTool.addEventListener('click', (event) => {\n      this.selectTool(this.imageTool)\n      this.imageInput.click()\n    })\n\n    //Bullets Tool\n    this.bulletsTool.addEventListener('click', (event) => {\n      this.selectTool(this.bulletsTool)\n      this.observers.bulletclicked.forEach((cb) => {\n        cb(event)\n      })\n    })\n\n    //Bold Tool\n    this.boldTool.addEventListener('click', (event) => {\n      this.selectTool(this.boldTool)\n      this.observers.boldclicked.forEach((cb) => {\n        cb(event)\n      })\n    })\n\n    //Italics Tool\n    this.italicsTool.addEventListener('click', (event) => {\n      this.selectTool(this.italicsTool)\n      this.observers.italicclicked.forEach((cb) => {\n        cb(event)\n      })\n    })\n\n    //Underline Tool\n    this.underlineTool.addEventListener('click', (event) => {\n      this.selectTool(this.underlineTool)\n      this.observers.underlineclicked.forEach((cb) => {\n        cb(event)\n      })\n    })\n\n    //Text Size\n    this.textSize.addEventListener('change', (event) => {\n      this.selectTool(this.textSize)\n      this.observers.sizeclicked.forEach((cb) => {\n        cb(this.textSize.value, event)\n      })\n    })\n\n    //Text Color\n    this.textColor.addEventListener('change', (event) => {\n      this.selectTool(this.textColor)\n      this.observers.colorclicked.forEach((cb) => {\n        cb(this.textColor.value, event)\n      })\n    })\n  }\n\n  selectTool(toolToBeSelected) {\n    //console.log(toolToBeSelected, 'selected')\n    if (!toolToBeSelected.classList.contains('selected-tool')) {\n      // toolToBeSelected.classList.remove('selected-tool')\n      // } else {\n      if (\n        document\n          .querySelector('tool-bar')\n          .shadowRoot.querySelector('.selected-tool')\n      ) {\n        let prevSelectedTool = document\n          .querySelector('tool-bar')\n          .shadowRoot.querySelector('.selected-tool')\n        let textTool = document\n          .querySelector('tool-bar')\n          .shadowRoot.querySelector('#text-tool')\n        console.log(prevSelectedTool, textTool)\n        if (prevSelectedTool == textTool) {\n          let dragView = document.querySelector('drag-view')\n          dragView.textOnClick = dragView.textOnClick ? false : true\n        }\n        prevSelectedTool.classList.remove('selected-tool')\n      } else {\n        console.log('No tool selected')\n      }\n      toolToBeSelected.classList.add('selected-tool')\n    }\n  }\n\n  addEventListener(eventType, callback) {\n    this.observers[eventType].push(callback)\n  }\n\n  removeEventListener(eventType, callback) {\n    this.observers[eventType].forEach((c, i) => {\n      if (callback == c) {\n        this.observers[eventType].splice(i, 0)\n        return false\n      }\n    })\n  }\n\n  removeAllListeners() {\n    this.observers = { open: [], close: [] }\n  }\n}\n\ncustomElements.define('tool-bar', ToolBar)\n\n\n//# sourceURL=webpack://source/./js/widgets/toolbar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/script.js");
/******/ 	
/******/ })()
;