/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/main-page-controller.js":
/*!************************************!*\
  !*** ./js/main-page-controller.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MainPageController\": () => (/* binding */ MainPageController)\n/* harmony export */ });\n/* harmony import */ var _widgets_drag_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets/drag-view.js */ \"./js/widgets/drag-view.js\");\n\r\nclass MainPageController {\r\n  constructor(view) {\r\n    this.view = view\r\n  }\r\n\r\n  registerListeners() {\r\n    // document.querySelector('').addEventListener('', () => {})\r\n    console.log(\r\n      document.querySelector('tool-bar').shadowRoot.querySelector('#text-tool')\r\n    )\r\n\r\n    function selectTool(toolToBeSelected) {\r\n      if (toolToBeSelected.classList.contains('selected-tool')) {\r\n        toolToBeSelected.classList.remove('selected-tool')\r\n      } else {\r\n        if (\r\n          document\r\n            .querySelector('tool-bar')\r\n            .shadowRoot.querySelector('.selected-tool')\r\n        ) {\r\n          document\r\n            .querySelector('tool-bar')\r\n            .shadowRoot.querySelector('.selected-tool')\r\n            .classList.remove('selected-tool')\r\n        } else {\r\n          console.log('No tool selected')\r\n        }\r\n        toolToBeSelected.classList.add('selected-tool')\r\n      }\r\n    }\r\n    // Toolbar buttons\r\n    let textTool = document\r\n      .querySelector('tool-bar')\r\n      .shadowRoot.querySelector('#text-tool')\r\n\r\n    textTool.addEventListener('click', (event) => {\r\n      selectTool(textTool)\r\n\r\n      let dragView = document.querySelector('drag-view')\r\n      console.log(dragView)\r\n      console.log(dragView.textOnClick)\r\n      dragView.textOnClick = dragView.textOnClick ? false : true\r\n    })\r\n    /// image tool\r\n    let imageTool = document\r\n      .querySelector('tool-bar')\r\n      .shadowRoot.querySelector('#image-tool')\r\n\r\n    console.log('Image tool', imageTool)\r\n\r\n    imageTool.addEventListener('click', (event) => {\r\n      console.log('You just clicked image tool')\r\n\r\n      selectTool(imageTool)\r\n\r\n      // let imageView = document.querySelector('image-view')\r\n      // console.log(imageView)\r\n    })\r\n  \r\n  // bullets tool\r\n  let bulletsTool = document\r\n      .querySelector('tool-bar')\r\n      .shadowRoot.querySelector('#bullets-tool')\r\n\r\n      bulletsTool.addEventListener('click', (event) => {\r\n      console.log('You just clicked bullets tool')\r\n      selectTool(bulletsTool)\r\n  })\r\n\r\n  // bold tool\r\n  let boldTool = document\r\n    .querySelector('tool-bar')\r\n    .shadowRoot.querySelector('#bold-tool')\r\n\r\n    boldTool.addEventListener('click', (event) => {\r\n    console.log('You just clicked bold tool')\r\n    selectTool(boldTool)\r\n  })\r\n\r\n  let italicTool = document\r\n    .querySelector('tool-bar')\r\n    .shadowRoot.querySelector('#italic-tool')\r\n\r\n    italicTool.addEventListener('click', (event) => {\r\n    selectTool(italicTool)\r\n  })\r\n\r\n  let underlineTool = document\r\n    .querySelector('tool-bar')\r\n    .shadowRoot.querySelector('#underline-tool')\r\n\r\n    underlineTool.addEventListener('click', (event) => {\r\n    selectTool(underlineTool)\r\n  })\r\n\r\n\r\n\r\n\r\n  }\r\n  //Example code\r\n  onTasksButtonClicked() {\r\n    console.log('Tasks button clicked...')\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://source/./js/main-page-controller.js?");

/***/ }),

/***/ "./js/script.js":
/*!**********************!*\
  !*** ./js/script.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _widgets_drag_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widgets/drag-view.js */ \"./js/widgets/drag-view.js\");\n/* harmony import */ var _main_page_controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main-page-controller.js */ \"./js/main-page-controller.js\");\n/* harmony import */ var _widgets_toolbar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./widgets/toolbar.js */ \"./js/widgets/toolbar.js\");\n/* harmony import */ var _widgets_toolbar_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_widgets_toolbar_js__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\nlet page = document.createElement('drag-view')\r\nlet toolbar = document.createElement('tool-bar')\r\n\r\ndocument.getElementsByTagName('main')[0].appendChild(page)\r\ndocument.getElementsByTagName('main')[0].appendChild(toolbar)\r\n\r\nfunction openIndex() {\r\n  console.log(document.querySelector('.left-pane'))\r\n  document.querySelector('.left-pane').style.height = '100px'\r\n}\r\n\r\n/**\r\n * Main page control\r\n */\r\nconst mainPageBody = document.querySelector('body')\r\nconst mainPageController = new _main_page_controller_js__WEBPACK_IMPORTED_MODULE_1__.MainPageController(mainPageBody)\r\n\r\nwindow.addEventListener('load', () => {\r\n  mainPageController.registerListeners()\r\n})\r\n\n\n//# sourceURL=webpack://source/./js/script.js?");

/***/ }),

/***/ "./js/widgets/drag-view.js":
/*!*********************************!*\
  !*** ./js/widgets/drag-view.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DragView\": () => (/* binding */ DragView)\n/* harmony export */ });\n/* harmony import */ var _text_box_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-box.js */ \"./js/widgets/text-box.js\");\n\r\n\r\nclass DragView extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n    // not sure if `toolselected` should be here or in script.js\r\n    // so for now Ishaan added this in both\r\n    var toolselected = 'text'\r\n\r\n    // not sure if `editPage()` should be here or in script.js\r\n    // so for now Ishaan added this in both\r\n    // function editPage() {\r\n    //   console.log('clicked on page', document.querySelector(\".page\"))\r\n    //   if (toolselected == 'text') {\r\n\r\n    //   }\r\n    //   if (toolselected == 'image') {\r\n    //   }\r\n    // }\r\n\r\n    // .drag-frame {\r\n    //   position:relative;\r\n    //   background: transparent;\r\n    //   border:1px solid grey;\r\n    //   width:100%;\r\n    //   height: 100%;\r\n    // }\r\n\r\n    const template = document.createElement('template')\r\n    template.innerHTML = `\r\n        <style>\r\n          \r\n          .drag-frame {\r\n            background-image: url('images/single-paper.jpg');\r\n            position: relative;\r\n            left: 250px;\r\n            top: 100px;\r\n            width: 1000px;\r\n            height: 1000px;\r\n            font-size: large;\r\n          \r\n            padding: 50px;\r\n            padding-left: 100px;\r\n          }\r\n          \r\n          .draggable {\r\n            display:block;\r\n            position:absolute;\r\n          }\r\n\r\n          .dragging {\r\n            display:none;\r\n          }\r\n          .focus {\r\n\r\n          }\r\n\r\n          .textbox {\r\n            resize: none;\r\n            padding: 5px;\r\n            overflow: hidden;\r\n            height: 20px;\r\n            font-size: 20px;\r\n            width: 200px;\r\n            border: none;\r\n          }\r\n\r\n          .bullet-square {\r\n            display:block;\r\n            position:absolute;\r\n            background-color: black;\r\n            display:block;\r\n            border: 1.5px solid black;\r\n            height: 4px;\r\n            width: 4px;\r\n          }\r\n\r\n          .bullet-circle {\r\n            display:block;\r\n            position:absolute;\r\n            border-radius: 50%;\r\n            background: transparent;\r\n            border: 1.5px solid black;\r\n            display:block;\r\n            height: 4px;\r\n            width: 4px;\r\n          }\r\n          .bullet-dot {\r\n            display: block;\r\n            position:absolute;\r\n            border-radius: 50%;\r\n            border: 1.5px solid black;\r\n            background-color: black;\r\n            display:block;\r\n            height: 4px;\r\n            width: 4px;\r\n          }\r\n\r\n        </style>\r\n        <div class=\"drag-frame\">\r\n        </div>\r\n        `\r\n\r\n    // template.addEventListener('click',editPage());\r\n\r\n    //const link = document.createElement('link')\r\n    //link.setAttribute('rel', 'stylesheet')\r\n    //link.setAttribute('href', 'style.css')\r\n\r\n    this.attachShadow({ mode: 'open' })\r\n    this.shadowRoot.appendChild(template.content.cloneNode(true))\r\n    //this.shadowRoot.appendChild(link)\r\n    this.initializeFields()\r\n    this.initializeEventListeners()\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    this.draggableFrame.addEventListener('click', (e) => {\r\n      if (this.createTextOnClick) {\r\n        const framePosition = this.draggableFrame.getBoundingClientRect()\r\n        //console.log('frame: ' + framePosition.x + '  mouse: ' + e.clientX)\r\n        const textPosition = {\r\n          //TODO 10, 20 should be variables\r\n          left: e.clientX - framePosition.x - 10 + 'px',\r\n          top: e.clientY - framePosition.y - 20 + 'px'\r\n        }\r\n        this.addDraggableTextBox(textPosition).focus()\r\n      }\r\n    })\r\n    this.draggableFrame.addEventListener('mouseleave', (e) => {\r\n      this.textBoxes.forEach((textBox, index) => {\r\n        textBox.onDraggableFrameMouseOut()\r\n      })\r\n    })\r\n\r\n    this.draggableFrame.addEventListener('mouseenter', (e) => {\r\n      this.textBoxes.forEach((textBox, index) => {\r\n        textBox.onDraggableFrameMouseEnter()\r\n      })\r\n    })\r\n  }\r\n\r\n  initializeFields() {\r\n    this.draggableFrame = this.shadowRoot.querySelector('.drag-frame')\r\n    this.lastFocusedText = undefined\r\n    this.textBoxes = []\r\n    this.draggableChildren = []\r\n    this.bltType = 'dot'\r\n    this.textOnClick = true\r\n    this.enableMagneticPositioning = true\r\n    this.bulletMargin = 10\r\n    this.baselineFontSize = 14\r\n    this.defaultPadding = 15\r\n    this.defaultTabSize = 2\r\n    this.lineSpacing = 0\r\n    this.magneticPotentialThreshold = 30\r\n    this.bulletStyles = ['dot', 'circle', 'square']\r\n  }\r\n\r\n  toggleBulletFromFocusedText() {\r\n    if (this.lastFocusedText.bullet) {\r\n      this.removeBulletFromeFocusedText()\r\n    } else {\r\n      this.addBulletToFocusedText()\r\n    }\r\n  }\r\n\r\n  removeBulletFromeFocusedText() {\r\n    this.lastFocusedText.removeBullet()\r\n  }\r\n\r\n  addBulletToFocusedText() {\r\n    this.addBulletToText(this.lastFocusedText, this.bltType)\r\n  }\r\n\r\n  /**\r\n   * Add a bullet to a text box\r\n   * @param {*} bulletType 'circle', 'square', 'dot'\r\n   * @param {*} textBox\r\n   * @returns {Image} a block displayed bullet(Image)\r\n   */\r\n  addBulletToText(textBox, bulletType) {\r\n    if (textBox.removed) {\r\n      return\r\n    }\r\n    const bullet = document.createElement('div')\r\n\r\n    let hasStyle = false\r\n    this.bulletStyles.forEach((stylestr, index) => {\r\n      if (bulletType == stylestr) {\r\n        bullet.classList.add('bullet-' + stylestr)\r\n        hasStyle = true\r\n        return true\r\n      }\r\n    })\r\n\r\n    if (!hasStyle) {\r\n      bullet.classList.add('bullet-dot')\r\n    }\r\n\r\n    textBox.bullet = bullet\r\n  }\r\n\r\n  /**\r\n   * Add a editable and draggable text box\r\n   * @param {object} coordinates {left: \"123px\", top: \"222px\"}\r\n   * @param {object} size {width: \"123px\", height: \"123px\"}\r\n   * @returns {HTMLElement} returns the draggable frame itself\r\n   */\r\n  addDraggableTextBox(coordinates) {\r\n    const textBox = new _text_box_js__WEBPACK_IMPORTED_MODULE_0__.TextBox(this.draggableFrame)\r\n    this.addDraggableElement(textBox, coordinates)\r\n    textBox.addEventListener('remove', () => {\r\n      this.removeArrayElement(textBox, this.textBoxes)\r\n      this.removeArrayElement(textBox, this.draggableChildren)\r\n    })\r\n    textBox.addEventListener('focus', () => {\r\n      this.lastFocusedText = textBox\r\n    })\r\n\r\n    textBox.addEventListener('tabpressed', () => {\r\n      const newX = this.getNextTabPosition(textBox)\r\n      console.log('old: ' + textBox.position.left, textBox.position.top)\r\n      console.log('new: ' + newX + 'px', textBox.position.top)\r\n      textBox.position = { left: newX + 'px', top: textBox.position.top }\r\n\r\n      //Change bullet when tab\r\n      if (textBox.bullet) {\r\n        let bulletIndex = 0\r\n        this.bulletStyles.forEach((style, index) => {\r\n          if (textBox.bullet.classList.contains('bullet-' + style)) {\r\n            bulletIndex =\r\n              index < this.bulletStyles.length - 1\r\n                ? index + 1\r\n                : this.bulletStyles.length - 1\r\n            return true\r\n          }\r\n        })\r\n        textBox.removeBullet()\r\n        this.addBulletToText(textBox, this.bulletStyles[bulletIndex])\r\n      }\r\n    })\r\n\r\n    textBox.addEventListener('dragend', () => {\r\n      this.magneticPositioning(textBox)\r\n    })\r\n\r\n    textBox.addEventListener('backspace', () => {\r\n      if (textBox.EmptyContent()) {\r\n        if (this.lessThanFirstTabPosition(textBox)) {\r\n          console.log('first position, delete')\r\n          if (!textBox.removed) {\r\n            textBox.removeSelf()\r\n            this.removeArrayElement(textBox, this.textBoxes)\r\n            this.removeArrayElement(textBox, this.draggableChildren)\r\n          }\r\n        } else {\r\n          console.log('Not first position, move left')\r\n          const newX = this.getPreviousTabPosition(textBox)\r\n          console.log(newX)\r\n          textBox.position = { left: newX + 'px', top: textBox.position.top }\r\n        }\r\n      }\r\n    })\r\n    textBox.addEventListener('enter', () => {\r\n      const framePosition = this.draggableFrame.getBoundingClientRect()\r\n      //console.log('frame: ' + framePosition.x + '  mouse: ' + e.clientX)\r\n      const textPosition = {\r\n        left: textBox.position.left,\r\n        top:\r\n          parseFloat(textBox.position.top) +\r\n          textBox.text.getBoundingClientRect().height +\r\n          this.lineSpacing +\r\n          'px'\r\n      }\r\n      const newTextBox = this.addDraggableTextBox(textPosition)\r\n      newTextBox.focus()\r\n      if (textBox.bullet) {\r\n        this.bulletStyles.forEach((style, index) => {\r\n          if (textBox.bullet.classList.contains('bullet-' + style)) {\r\n            this.addBulletToText(newTextBox, style)\r\n            return true\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    this.textBoxes.push(textBox)\r\n    this.draggableChildren.push(textBox)\r\n    /*console.log(\r\n      'boxes vs children:' +\r\n        this.textBoxes.length +\r\n        '|' +\r\n        this.draggableChildren.length\r\n    )*/\r\n\r\n    return textBox\r\n  }\r\n\r\n  /**\r\n   * add draggable element to the view\r\n   *\r\n   * @param {HTMLElement} element the html element to add into this frame\r\n   * @param {object} coordinats {left: \"123px\", top: \"356px\"}\r\n   * @returns {null} returns the draggable frame itself\r\n   */\r\n  addDraggableElement(child, coordinates) {\r\n    child.position = coordinates\r\n    child.enableDragAndDrop()\r\n  }\r\n\r\n  magneticPositioning(child) {\r\n    if (!this.enableMagneticPositioning) return\r\n    const nearest = this.getNearestChild(child)\r\n    if (nearest) {\r\n      console.log('find nearest: ' + nearest.pos)\r\n      this.moveDraggableChildByAnimation(child, nearest)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * move a child to target by animation\r\n   * @param {object} child a draggable child\r\n   * @returns {object} {element: node, pos: 123, side: 'bottom'} position related to the viewport\r\n   */\r\n  moveDraggableChildByAnimation(child, target) {\r\n    console.log('animate..')\r\n    const childPos = child.text.getBoundingClientRect()\r\n    switch (target.side) {\r\n      case 'top':\r\n        console.log('animate top..')\r\n        child.translateY(target.pos + this.lineSpacing)\r\n        break\r\n      case 'bottom':\r\n        console.log('animate bottom..')\r\n        child.translateY(\r\n          target.pos -\r\n            (parseInt(childPos.bottom) - parseInt(childPos.top)) -\r\n            this.lineSpacing\r\n        )\r\n        break\r\n      default:\r\n        console.log('animate center..')\r\n        child.translateY(\r\n          target.pos - (parseInt(childPos.bottom) - parseInt(childPos.top)) / 2\r\n        )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helpers\r\n   */\r\n\r\n  /**\r\n   * Get a nearest draggable element from a child\r\n   * @param {object} child a draggable child\r\n   * @returns {object} {element: node, pos: '123px', side: 'bottom'}\r\n   */\r\n  getNearestChild(child) {\r\n    let minDistance = Infinity\r\n    let nearestChild = undefined\r\n    //console.log('looking for nearest...')\r\n    //console.log('draggable children:' + this.draggableChildren.length)\r\n    const childStyle = child.text.getBoundingClientRect()\r\n    this.draggableChildren.forEach((dChild, index) => {\r\n      //console.log('child' + index)\r\n      if (dChild == child) {\r\n        return\r\n      }\r\n      const style = dChild.text.getBoundingClientRect()\r\n\r\n      console.log('dchild: ' + style.bottom + '| ' + style.top)\r\n      console.log('child: ' + childStyle.bottom + '| ' + childStyle.top)\r\n      if (style.top && style.bottom) {\r\n        const distanceBottom = Math.abs(childStyle.bottom - style.top)\r\n        const distanceTop = Math.abs(childStyle.top - style.bottom)\r\n        const distanceCenter = Math.abs(\r\n          (childStyle.top + childStyle.bottom) / 2 -\r\n            (style.top + style.bottom) / 2\r\n        )\r\n\r\n        console.log(\r\n          'top:' +\r\n            distanceTop +\r\n            '| bottom:' +\r\n            distanceBottom +\r\n            '| center:' +\r\n            distanceCenter\r\n        )\r\n        const minObjectsDistance = Math.min(\r\n          distanceBottom,\r\n          distanceTop,\r\n          distanceCenter\r\n        )\r\n\r\n        console.log('min distance: ' + minObjectsDistance)\r\n        if (\r\n          minObjectsDistance < this.magneticPotentialThreshold &&\r\n          minObjectsDistance < minDistance\r\n        ) {\r\n          console.log('found nearer')\r\n          nearestChild = {}\r\n          minDistance = minObjectsDistance\r\n          nearestChild.element = dChild\r\n\r\n          switch (minObjectsDistance) {\r\n            case distanceBottom:\r\n              nearestChild.side = 'bottom'\r\n              nearestChild.pos = style.top\r\n              break\r\n            case distanceTop:\r\n              nearestChild.side = 'top'\r\n              nearestChild.pos = style.bottom\r\n              break\r\n            default:\r\n              nearestChild.side = 'cernter'\r\n              nearestChild.pos = (style.bottom + style.top) / 2\r\n          }\r\n        }\r\n      }\r\n    })\r\n    return nearestChild\r\n  }\r\n\r\n  removeArrayElement(element, array) {\r\n    const index = array.indexOf(element)\r\n    if (index != -1) {\r\n      array.splice(index, 1)\r\n    }\r\n  }\r\n\r\n  lessThanFirstTabPosition(textBox) {\r\n    const firstPosition = this.defaultPadding + this.bulletMargin\r\n\r\n    console.log(textBox.text.offsetLeft + '|' + firstPosition)\r\n    return textBox.text.offsetLeft <= firstPosition\r\n  }\r\n\r\n  /**\r\n   * Calculate the previous tab position\r\n   * @param {object} childPosition the object return by the getBoundingClientRect() method\r\n   * @returns {number} the horizontal previous position relative to the parent\r\n   */\r\n  getPreviousTabPosition(textBox) {\r\n    const tabIndex = Math.ceil(\r\n      (textBox.text.offsetLeft - this.defaultPadding - this.bulletMargin) /\r\n        (this.baselineFontSize * this.defaultTabSize) -\r\n        1.0\r\n    )\r\n    console.log('index:' + tabIndex)\r\n    return (\r\n      this.defaultPadding +\r\n      this.bulletMargin +\r\n      tabIndex * (this.baselineFontSize * this.defaultTabSize)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Calculate the next tab position\r\n   * @param {object} textBox\r\n   * @returns {number} the horizontal position relative to the parent\r\n   */\r\n  getNextTabPosition(textBox) {\r\n    const tabIndex = Math.floor(\r\n      (textBox.text.offsetLeft - this.defaultPadding - this.bulletMargin) /\r\n        (this.baselineFontSize * this.defaultTabSize) +\r\n        1.0\r\n    )\r\n    return (\r\n      this.defaultPadding +\r\n      this.bulletMargin +\r\n      tabIndex * (this.baselineFontSize * this.defaultTabSize)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Setter and getter\r\n   */\r\n  set textOnClick(isTextOnClick) {\r\n    this.createTextOnClick = isTextOnClick\r\n  }\r\n\r\n  get textOnClick() {\r\n    return this.createTextOnClick\r\n  }\r\n}\r\n// not sure if `editPage()` should be here or in one of the components\r\n// cannot access shadow DOM from here, though\r\n// function defined in drag-view.js, commented here\r\n// so for now Ishaan added this in both\r\nfunction editPage(caller) {\r\n  //   console.log('clicked on page',event)\r\n  if (toolselected == 'text') {\r\n    console.log(caller, caller)\r\n    const newText = document.createElement('div')\r\n    newText.position = 'relative'\r\n    newText.left = indent * 100 + 'px'\r\n    indent++\r\n    console.log(indent, newText.left)\r\n    newText.border = '3px solid #73AD21'\r\n    newText.contentEditable = 'true'\r\n    newText.innerHTML = `<h3>New text</h3>`\r\n\r\n    caller.appendChild(newText)\r\n    console.log(caller)\r\n  }\r\n  if (toolselected == 'image') {\r\n  }\r\n}\r\ncustomElements.define('drag-view', DragView)\r\n\n\n//# sourceURL=webpack://source/./js/widgets/drag-view.js?");

/***/ }),

/***/ "./js/widgets/text-box.js":
/*!********************************!*\
  !*** ./js/widgets/text-box.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextBox\": () => (/* binding */ TextBox)\n/* harmony export */ });\nclass TextBox {\r\n  constructor(draggableFrame, bullet) {\r\n    if (draggableFrame) {\r\n      this.draggableFrame = draggableFrame\r\n    }\r\n    if (bullet) {\r\n      this.blt = bullet\r\n    }\r\n    this.textListeners = []\r\n    this.bulletMargin = 10\r\n\r\n    this.observers = {\r\n      remove: [],\r\n      focus: [],\r\n      blur: [],\r\n      tabpressed: [],\r\n      dragend: [],\r\n      backspace: [],\r\n      enter: [],\r\n      shiftenter: []\r\n    }\r\n    this.removed = false\r\n    this.keydowns = new Set()\r\n\r\n    this.initializeText()\r\n    this.initializeEventListeners()\r\n    this.setEventListeners()\r\n  }\r\n\r\n  initializeText() {\r\n    this.text = document.createElement('textarea')\r\n    this.text.classList.add('textbox')\r\n    this.text.style.background = 'transparent'\r\n    this.draggableFrame.appendChild(this.text)\r\n    this.lastScrollHeight = this.text.scrollHeight\r\n    this.textPadding = parseFloat(\r\n      window.getComputedStyle(this.text).getPropertyValue('padding-top')\r\n    )\r\n    console.log(this.textPadding, this.lastScrollHeight)\r\n    console.log(\r\n      'height:' + this.lastTextHeight + ',' + 'extra:' + this.extraHeight\r\n    )\r\n  }\r\n\r\n  removeBullet() {\r\n    this.draggableFrame.removeChild(this.blt)\r\n    this.blt = undefined\r\n  }\r\n\r\n  set bullet(bullet) {\r\n    if (this.bullet) {\r\n      this.removeBullet()\r\n    }\r\n    this.blt = bullet\r\n    this.draggableFrame.appendChild(this.blt)\r\n    const bulletStyle = window.getComputedStyle(this.blt)\r\n    const textStyle = window.getComputedStyle(this.text)\r\n    //console.log('bulletheight: ' + bulletStyle.height)\r\n    //console.log('bulletheight: ' + textStyle.top)\r\n    this.bulletHeight = parseFloat(bulletStyle.height)\r\n    this.bulletWidth = parseFloat(bulletStyle.width)\r\n\r\n    const topBulletMargin =\r\n      parseFloat(textStyle.getPropertyValue('padding-top')) +\r\n      0.6 * parseFloat(textStyle.fontSize) -\r\n      this.bulletHeight / 2\r\n    //console.log('textpadding: ' + textStyle.getPropertyValue('padding-top'))\r\n    this.blt.style.top = parseFloat(textStyle.top) + topBulletMargin + 'px'\r\n    this.blt.style.left =\r\n      parseFloat(textStyle.left) -\r\n      this.bulletWidth / 2 -\r\n      this.bulletMargin +\r\n      'px'\r\n\r\n    //console.log(this.bulletHeight)\r\n    //console.log(topBulletMargin)\r\n    //console.log(textStyle.top)\r\n\r\n    this.setEventListeners()\r\n  }\r\n\r\n  get bullet() {\r\n    return this.blt\r\n  }\r\n\r\n  initializeEventListeners() {\r\n    this.textListeners.push({\r\n      eventType: 'click',\r\n      callback: (e) => {\r\n        e.stopImmediatePropagation()\r\n      }\r\n    })\r\n\r\n    this.textListeners.push({\r\n      eventType: 'mouseover',\r\n      callback: (e) => {\r\n        this.text.classList.add('mouse-over')\r\n      }\r\n    })\r\n    this.textListeners.push({\r\n      eventType: 'mouseleave',\r\n      callback: (e) => {\r\n        this.text.classList.remove('mouse-over')\r\n      }\r\n    })\r\n\r\n    this.textListeners.push({\r\n      eventType: 'focus',\r\n      callback: (e) => {\r\n        //console.log('focus')\r\n        this.text.classList.add('focus')\r\n        this.text.style.resize = 'both'\r\n        this.observers.focus.forEach((cb, i) => {\r\n          cb()\r\n        })\r\n      }\r\n    })\r\n    this.textListeners.push({\r\n      eventType: 'blur',\r\n      callback: (e) => {\r\n        //console.log('blur')\r\n        this.observers.blur.forEach((cb, i) => {\r\n          cb()\r\n        })\r\n        //console.log(this.text.value.trim() === '')\r\n        //console.log(this.text.classList.contains('mouse-over'))\r\n        if (\r\n          !this.removed &&\r\n          this.hasNothing() &&\r\n          !this.text.classList.contains('mouse-over')\r\n        ) {\r\n          this.removeSelf()\r\n        } else {\r\n          this.text.classList.remove('focus')\r\n        }\r\n        this.text.style.resize = 'none'\r\n      }\r\n    })\r\n    this.textListeners.push({\r\n      eventType: 'keydown',\r\n      callback: (e) => {\r\n        this.keydowns.add(e.key)\r\n        this.resizeToFitText()\r\n        //console.log(this.text.value.includes('\\n'))\r\n\r\n        switch (e.key) {\r\n          case 'Delete':\r\n            //console.log('delete')\r\n            this.removeSelf()\r\n            break\r\n          case 'Tab':\r\n            e.preventDefault()\r\n            console.log('Tab')\r\n            this.observers.tabpressed.forEach((callback, i) => {\r\n              callback()\r\n            })\r\n            break\r\n          case 'Backspace':\r\n            console.log('Backspace')\r\n            this.observers.backspace.forEach((callback, i) => {\r\n              callback()\r\n            })\r\n            break\r\n          case 'Enter':\r\n            if (this.keydowns.has('Shift')) {\r\n              //console.log('Shift + Enter')\r\n              this.observers.shiftenter.forEach((callback, i) => {\r\n                callback()\r\n              })\r\n            } else {\r\n              //console.log('Enter')\r\n              e.preventDefault()\r\n              this.observers.enter.forEach((callback, i) => {\r\n                callback()\r\n              })\r\n            }\r\n            break\r\n        }\r\n      }\r\n    })\r\n\r\n    this.textListeners.push({\r\n      eventType: 'keyup',\r\n      callback: (e) => {\r\n        this.keydowns.delete(e.key)\r\n        this.resizeToFitText()\r\n      }\r\n    })\r\n  }\r\n\r\n  resizeToFitText() {\r\n    //console.log(\r\n    //  'resize:' + this.text.scrollHeight + '| ' + this.lastScrollHeight\r\n    //)\r\n    if (this.text.scrollHeight != this.lastScrollHeight) {\r\n      this.text.style.height =\r\n        parseFloat(this.text.getBoundingClientRect().height) +\r\n        parseFloat(this.text.scrollHeight) -\r\n        parseFloat(this.lastScrollHeight) +\r\n        'px'\r\n      this.lastScrollHeight = this.text.scrollHeight\r\n    }\r\n  }\r\n\r\n  removeSelf() {\r\n    this.removed = true\r\n    this.draggableFrame.removeChild(this.text)\r\n    if (this.bullet) {\r\n      this.draggableFrame.removeChild(this.bullet)\r\n    }\r\n    this.observers.remove.forEach((callback, i) => {\r\n      callback()\r\n    })\r\n  }\r\n\r\n  setEventListeners() {\r\n    this.textListeners.forEach((listener, index) => {\r\n      this.text.removeEventListener(listener.eventType, listener.callback)\r\n      this.text.addEventListener(listener.eventType, listener.callback)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set the position of the text relative to its parent\r\n   * @param {object} coordinates {left: '123px', top: '1231px'}\r\n   */\r\n  set position(coordinates) {\r\n    const framePosition = this.draggableFrame.getBoundingClientRect()\r\n    if (\r\n      parseFloat(coordinates.left) - this.bulletMargin < 0 ||\r\n      parseFloat(coordinates.left) + this.text.getBoundingClientRect().width >\r\n        framePosition.width ||\r\n      parseFloat(coordinates.top) < 0 ||\r\n      parseFloat(coordinates.top) + this.text.getBoundingClientRect().height >\r\n        framePosition.height\r\n    ) {\r\n      return\r\n    }\r\n\r\n    if (this.bullet) {\r\n      this.bullet.style.left =\r\n        parseFloat(this.bullet.style.left) +\r\n        parseFloat(coordinates.left) -\r\n        parseFloat(this.pos.left) +\r\n        'px'\r\n      this.bullet.style.top =\r\n        parseFloat(this.bullet.style.top) +\r\n        parseFloat(coordinates.top) -\r\n        parseFloat(this.pos.top) +\r\n        'px'\r\n    }\r\n\r\n    this.pos = coordinates\r\n    this.text.style.left = coordinates.left\r\n    this.text.style.top = coordinates.top\r\n  }\r\n\r\n  get position() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * translate vertically\r\n   * @param {number} targetX position in the viewport\r\n   * @param {number} targetY position in the viewport\r\n   * @param {number} speed px / second\r\n   */\r\n  translateY(targetY) {\r\n    console.log('target position:' + targetY)\r\n    const deltaY = targetY - this.text.getBoundingClientRect().top\r\n    const anims = []\r\n    anims.push(\r\n      this.text.animate([{ transform: 'translateY(' + deltaY + 'px)' }], {\r\n        duration: 50\r\n      }).finished\r\n    )\r\n\r\n    if (this.bullet) {\r\n      anims.push(\r\n        this.bullet.animate(\r\n          [\r\n            {\r\n              transform: 'translateY(' + deltaY + 'px)'\r\n            }\r\n          ],\r\n          {\r\n            duration: 50\r\n          }\r\n        ).finished\r\n      )\r\n    }\r\n\r\n    Promise.all(anims).then((data) => {\r\n      this.position = {\r\n        left: this.position.left,\r\n        top: parseFloat(this.position.top) + deltaY + 'px'\r\n      }\r\n    })\r\n  }\r\n\r\n  enableDragAndDrop() {\r\n    this.text.classList.add('draggable')\r\n    this.text.draggable = true\r\n    let framePosition = {}\r\n    let mousePosition = {}\r\n    this.text.addEventListener('dragstart', (e) => {\r\n      framePosition = this.draggableFrame.getBoundingClientRect()\r\n      mousePosition.x = e.clientX\r\n      mousePosition.y = e.clientY\r\n\r\n      //console.log('dragstart')\r\n      if (this.bullet) {\r\n        this.bullet.classList.add('dragging')\r\n        this.bullet.style.display = 'none'\r\n      }\r\n    })\r\n    this.text.addEventListener('drag', (e) => {\r\n      this.text.classList.add('dragging')\r\n      //console.log('dragging')\r\n    })\r\n    this.text.addEventListener('dragend', (e) => {\r\n      e.preventDefault()\r\n\r\n      //console.log('dragend')\r\n      this.text.classList.remove('dragging')\r\n\r\n      if (this.bullet) {\r\n        this.bullet.style.display = 'block'\r\n        this.bullet.classList.remove('dragging')\r\n      }\r\n\r\n      //console.log(this.bullet)\r\n\r\n      const deltaX = e.clientX - mousePosition.x\r\n      const deltaY = e.clientY - mousePosition.y\r\n\r\n      this.position = {\r\n        left: parseFloat(this.position.left) + deltaX + 'px',\r\n        top: parseFloat(this.position.top) + deltaY + 'px'\r\n      }\r\n\r\n      this.observers.dragend.forEach((callback, i) => {\r\n        callback()\r\n      })\r\n      this.text.focus()\r\n    })\r\n  }\r\n\r\n  addEventListener(eventType, callback) {\r\n    this.observers[eventType].push(callback)\r\n  }\r\n\r\n  removeEventListener(eventType, callback) {\r\n    this.observers[eventType].forEach((c, i) => {\r\n      if (callback == c) {\r\n        this.observers[eventType].splice(i, 0)\r\n        return false\r\n      }\r\n    })\r\n  }\r\n\r\n  removeAllListeners() {\r\n    this.observers = { remove: [], focus: [] }\r\n  }\r\n\r\n  focus() {\r\n    this.text.focus()\r\n  }\r\n\r\n  hasNothing() {\r\n    return this.text.value === '' && !this.bullet\r\n  }\r\n\r\n  EmptyContent() {\r\n    return this.text.value === ''\r\n  }\r\n\r\n  onDraggableFrameMouseOut() {\r\n    console.log('mouseout!')\r\n    this.textListeners.forEach((listener, index) => {\r\n      this.text.removeEventListener(listener.eventType, listener.callback)\r\n    })\r\n  }\r\n\r\n  onDraggableFrameMouseEnter() {\r\n    console.log('mousein!')\r\n    this.setEventListeners()\r\n  }\r\n  /**\r\n   * Helpers\r\n   */\r\n}\r\n\n\n//# sourceURL=webpack://source/./js/widgets/text-box.js?");

/***/ }),

/***/ "./js/widgets/toolbar.js":
/*!*******************************!*\
  !*** ./js/widgets/toolbar.js ***!
  \*******************************/
/***/ (() => {

eval("class ToolBar extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n    console.log('toolbar constr called')\r\n    const template = document.createElement('template')\r\n    template.innerHTML = `\r\n\r\n        <div class=\"tool-bar\">\r\n          <button class=\"tool selected-tool\" id=\"text-tool\">\r\n            <svg class=\"icon-text\" viewBox=\"0 0 36 36\">\r\n              <path id=\"icon-text\" d=\"M 0 0 L 0 9 L 2.25 9 C 2.25 6.525000095367432 4.275000095367432 4.5 6.75 4.5 L 13.5 4.5 L 13.5 29.25 C 13.5 30.51000022888184 12.51000022888184 31.5 11.25 31.5 L 9 31.5 L 9 36 L 27 36 L 27 31.5 L 24.75 31.5 C 23.48999977111816 31.5 22.5 30.51000022888184 22.5 29.25 L 22.5 4.5 L 29.25 4.5 C 31.72500038146973 4.5 33.75 6.525000095367432 33.75 9 L 36 9 L 36 0 L 0 0 Z\">\r\n              </path>\r\n\t          </svg>\r\n          </button>\r\n\r\n          <button class=\"tool\" id=\"image-tool\">\r\n            <svg class=\"Icon_material-image\" viewBox=\"4.5 4.5 27 27\">\r\n              <path id=\"Icon_material-image\" d=\"M 31.5 28.5 L 31.5 7.5 C 31.5 5.849999904632568 30.14999961853027 4.5 28.5 4.5 L 7.5 4.5 C 5.849999904632568 4.5 4.5 5.849999904632568 4.5 7.5 L 4.5 28.5 C 4.5 30.14999961853027 5.849999904632568 31.5 7.5 31.5 L 28.5 31.5 C 30.14999961853027 31.5 31.5 30.14999961853027 31.5 28.5 Z M 12.75 20.25 L 16.5 24.76499938964844 L 21.75 18 L 28.5 27 L 7.5 27 L 12.75 20.25 Z\">\r\n              </path>\r\n\t          </svg>\r\n          </button>\r\n\r\n          <button class=\"tool\" id=\"bullets-tool\">\r\n            <svg class=\"icon-bullet\" viewBox=\"2 2 50 50\">\r\n              <path id=\"icon-bullet\" d=\"M 4 4 C 1.800781 4 0 5.800781 0 8 C 0 10.199219 1.800781 12 4 12 C 6.199219 12 8 10.199219 8 8 C 8 5.800781 6.199219 4 4 4 Z M 12 6 L 12 10 L 50 10 L 50 6 Z M 4 21 C 1.800781 21 0 22.800781 0 25 C 0 27.199219 1.800781 29 4 29 C 6.199219 29 8 27.199219 8 25 C 8 22.800781 6.199219 21 4 21 Z M 12 23 L 12 27 L 50 27 L 50 23 Z M 4 38 C 1.800781 38 0 39.800781 0 42 C 0 44.199219 1.800781 46 4 46 C 6.199219 46 8 44.199219 8 42 C 8 39.800781 6.199219 38 4 38 Z M 12 40 L 12 44 L 50 44 L 50 40 Z\">\r\n              </path>\r\n            </svg>\r\n          </button>\r\n\r\n          <button class=\"tool\" id=\"bold-tool\">\r\n            <svg class=\"icon-bold\" viewBox = \"0 0 125 125\">\r\n              <path d=\"M78.65,57.74c11.66,2.69,19.86,6,24.56,9.87c6.77,5.51,10.14,12.62,10.14,21.37c0,9.25-3.71,16.89-11.13,22.92 c-9.12,7.33-22.39,10.98-39.77,10.98H0v-3.34c5.69,0,9.52-0.53,11.57-1.61c2.01-1.05,3.43-2.41,4.24-4.11 c0.83-1.7,1.24-5.85,1.24-12.49V21.59c0-6.65-0.4-10.83-1.24-12.56C15,7.3,13.55,5.94,11.5,4.92C9.46,3.87,5.63,3.37,0,3.37L0,0 h58.89c14.07,0,24.06,1.27,29.91,3.78c5.88,2.51,10.49,6.25,13.86,11.23c3.4,4.98,5.07,10.3,5.07,15.9c0,5.94-2.13,11.2-6.43,15.84 C97.02,51.34,89.47,55.02,78.65,57.74L78.65,57.74z M45.68,55.27c8.57,0,14.88-0.96,18.96-2.88c4.08-1.95,7.21-4.67,9.4-8.17 c2.17-3.49,3.25-7.98,3.25-13.42c0-5.41-1.08-9.86-3.22-13.36c-2.13-3.46-5.19-6.09-9.18-7.92C60.9,7.7,54.5,6.84,45.68,6.9V55.27 L45.68,55.27L45.68,55.27z M45.68,62.35v39.4l-0.09,4.55c0,3.25,0.8,5.72,2.48,7.39c1.67,1.64,4.11,2.47,7.39,2.47 c4.82,0,9.28-1.05,13.36-3.22c4.08-2.13,7.2-5.26,9.37-9.34c2.2-4.05,3.28-8.6,3.28-13.61c0-5.75-1.33-10.92-3.99-15.46 c-2.66-4.55-6.31-7.73-10.98-9.56C61.86,63.16,54.9,62.29,45.68,62.35L45.68,62.35L45.68,62.35z\">\r\n              </path>\r\n            </svg>\r\n          </button>\r\n\r\n          <button class=\"tool\" id=\"italic-tool\">\r\n            <svg class=\"icon-italics\" viewBox = \"0 0 125 125\">\r\n              <path d=\"M32.16,3.37L33.16,0h60l-1.18,3.37c-5.44,0-9.59,1.21-12.46,3.62c-2.88,2.41-5.38,7.45-7.58,15.13l-22.45,78.65 c-1.64,5.57-2.44,9.28-2.44,11.13c0,2.19,0.83,3.86,2.54,5.1c2.17,1.55,6.28,2.41,12.31,2.54l-0.9,3.34H0l0.99-3.34 c6.13,0,10.58-1.18,13.42-3.5c2.85-2.32,5.42-7.42,7.7-15.28l22.64-78.65c1.39-4.83,2.1-8.48,2.1-10.95c0-2.26-0.87-3.99-2.54-5.26 C42.62,4.64,38.57,3.78,32.16,3.37L32.16,3.37L32.16,3.37z\">\r\n              </path>\r\n            </svg>\r\n          </button>\r\n\r\n          <button class=\"tool\" id=\"underline-tool\">\r\n            <svg class=\"icon-underline\" viewBox = \"0 0 125 125\">\r\n              <path d=\"M3.62,0h52.58v2.8h-2.62c-3.95,0-6.67,0.41-8.16,1.23C43.93,4.85,42.88,6,42.27,7.44c-0.61,1.46-0.95,5.1-0.95,10.9v49.88 c0,9.13,0.69,15.16,2.08,18.13c1.39,2.95,3.64,5.39,6.8,7.36c3.15,1.95,7.13,2.92,11.95,2.92c5.51,0,10.21-1.23,14.08-3.72 c3.9-2.49,6.8-5.9,8.72-10.26c1.92-4.36,2.9-11.95,2.9-22.78V18.34c0-4.57-0.49-7.82-1.44-9.77c-0.95-1.95-2.16-3.31-3.59-4.05 c-2.26-1.15-5.44-1.72-9.57-1.72V0h35.24v2.8h-2.1c-2.85,0-5.23,0.57-7.13,1.72c-1.9,1.15-3.28,2.87-4.13,5.18 c-0.64,1.62-0.97,4.49-0.97,8.64v38.7c0,11.98-0.79,20.62-2.36,25.93c-1.59,5.31-5.44,10.18-11.54,14.64 c-6.1,4.46-14.47,6.69-25.03,6.69c-8.8,0-15.62-1.18-20.44-3.54c-6.54-3.21-11.18-7.31-13.9-12.31 c-2.69-5.03-4.05-11.75-4.05-20.24V18.34c0-5.85-0.31-9.49-0.97-10.93C15.21,5.98,14.08,4.85,12.46,4 C10.87,3.13,7.92,2.74,3.62,2.8V0L3.62,0z M0,115.89h111.13v7H0V115.89L0,115.89z\">\r\n              </path>\r\n            </svg>\r\n          </div>\r\n        </button>\r\n        `\r\n\r\n    // template.addEventListener('click',editPage());\r\n\r\n    \r\n      /* <button class=\"tool\" id=\"bullet-tool\">\r\n              <svg class=\"icon-bullet\" viewBox=\"2 2 50 50\">\r\n                <path id=\"icon-bullet\" d=\"M 4 4 C 1.800781 4 0 5.800781 0 8 C 0 10.199219 1.800781 12 4 12 C 6.199219 12 8 10.199219 8 8 C 8 5.800781 6.199219 4 4 4 Z M 12 6 L 12 10 L 50 10 L 50 6 Z M 4 21 C 1.800781 21 0 22.800781 0 25 C 0 27.199219 1.800781 29 4 29 C 6.199219 29 8 27.199219 8 25 C 8 22.800781 6.199219 21 4 21 Z M 12 23 L 12 27 L 50 27 L 50 23 Z M 4 38 C 1.800781 38 0 39.800781 0 42 C 0 44.199219 1.800781 46 4 46 C 6.199219 46 8 44.199219 8 42 C 8 39.800781 6.199219 38 4 38 Z M 12 40 L 12 44 L 50 44 L 50 40 Z\">\r\n              </svg>\r\n            </button> */\r\n    \r\n\r\n    const link = document.createElement('link')\r\n    link.setAttribute('rel', 'stylesheet')\r\n    link.setAttribute('href', 'styles/toolbar.css')\r\n\r\n    this.attachShadow({ mode: 'open' })\r\n    this.shadowRoot.appendChild(link)\r\n    this.shadowRoot.appendChild(template.content.cloneNode(true))\r\n  }\r\n}\r\n\r\ncustomElements.define('tool-bar', ToolBar)\r\n\n\n//# sourceURL=webpack://source/./js/widgets/toolbar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/script.js");
/******/ 	
/******/ })()
;